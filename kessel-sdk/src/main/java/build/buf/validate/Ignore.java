// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: buf/validate/validate.proto
// Protobuf Java Version: 4.32.0

package build.buf.validate;

/**
 * <pre>
 * Specifies how `FieldRules.ignore` behaves, depending on the field's value, and
 * whether the field tracks presence.
 * </pre>
 *
 * Protobuf enum {@code buf.validate.Ignore}
 */
@com.google.protobuf.Generated
public enum Ignore
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Ignore rules if the field tracks presence and is unset. This is the default
   * behavior.
   *
   * In proto3, only message fields, members of a Protobuf `oneof`, and fields
   * with the `optional` label track presence. Consequently, the following fields
   * are always validated, whether a value is set or not:
   *
   * ```proto
   * syntax="proto3";
   *
   * message RulesApply {
   * string email = 1 [
   * (buf.validate.field).string.email = true
   * ];
   * int32 age = 2 [
   * (buf.validate.field).int32.gt = 0
   * ];
   * repeated string labels = 3 [
   * (buf.validate.field).repeated.min_items = 1
   * ];
   * }
   * ```
   *
   * In contrast, the following fields track presence, and are only validated if
   * a value is set:
   *
   * ```proto
   * syntax="proto3";
   *
   * message RulesApplyIfSet {
   * optional string email = 1 [
   * (buf.validate.field).string.email = true
   * ];
   * oneof ref {
   * string reference = 2 [
   * (buf.validate.field).string.uuid = true
   * ];
   * string name = 3 [
   * (buf.validate.field).string.min_len = 4
   * ];
   * }
   * SomeMessage msg = 4 [
   * (buf.validate.field).cel = {/&#42; ... *&#47;}
   * ];
   * }
   * ```
   *
   * To ensure that such a field is set, add the `required` rule.
   *
   * To learn which fields track presence, see the
   * [Field Presence cheat sheet](https://protobuf.dev/programming-guides/field_presence/#cheat).
   * </pre>
   *
   * <code>IGNORE_UNSPECIFIED = 0;</code>
   */
  IGNORE_UNSPECIFIED(0),
  /**
   * <pre>
   * Ignore rules if the field is unset, or set to the zero value.
   *
   * The zero value depends on the field type:
   * - For strings, the zero value is the empty string.
   * - For bytes, the zero value is empty bytes.
   * - For bool, the zero value is false.
   * - For numeric types, the zero value is zero.
   * - For enums, the zero value is the first defined enum value.
   * - For repeated fields, the zero is an empty list.
   * - For map fields, the zero is an empty map.
   * - For message fields, absence of the message (typically a null-value) is considered zero value.
   *
   * For fields that track presence (e.g. adding the `optional` label in proto3),
   * this a no-op and behavior is the same as the default `IGNORE_UNSPECIFIED`.
   * </pre>
   *
   * <code>IGNORE_IF_ZERO_VALUE = 1;</code>
   */
  IGNORE_IF_ZERO_VALUE(1),
  /**
   * <pre>
   * Always ignore rules, including the `required` rule.
   *
   * This is useful for ignoring the rules of a referenced message, or to
   * temporarily ignore rules during development.
   *
   * ```proto
   * message MyMessage {
   * // The field's rules will always be ignored, including any validations
   * // on value's fields.
   * MyOtherMessage value = 1 [
   * (buf.validate.field).ignore = IGNORE_ALWAYS];
   * }
   * ```
   * </pre>
   *
   * <code>IGNORE_ALWAYS = 3;</code>
   */
  IGNORE_ALWAYS(3),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 0,
      /* suffix= */ "",
      Ignore.class.getName());
  }
  /**
   * <pre>
   * Ignore rules if the field tracks presence and is unset. This is the default
   * behavior.
   *
   * In proto3, only message fields, members of a Protobuf `oneof`, and fields
   * with the `optional` label track presence. Consequently, the following fields
   * are always validated, whether a value is set or not:
   *
   * ```proto
   * syntax="proto3";
   *
   * message RulesApply {
   * string email = 1 [
   * (buf.validate.field).string.email = true
   * ];
   * int32 age = 2 [
   * (buf.validate.field).int32.gt = 0
   * ];
   * repeated string labels = 3 [
   * (buf.validate.field).repeated.min_items = 1
   * ];
   * }
   * ```
   *
   * In contrast, the following fields track presence, and are only validated if
   * a value is set:
   *
   * ```proto
   * syntax="proto3";
   *
   * message RulesApplyIfSet {
   * optional string email = 1 [
   * (buf.validate.field).string.email = true
   * ];
   * oneof ref {
   * string reference = 2 [
   * (buf.validate.field).string.uuid = true
   * ];
   * string name = 3 [
   * (buf.validate.field).string.min_len = 4
   * ];
   * }
   * SomeMessage msg = 4 [
   * (buf.validate.field).cel = {/&#42; ... *&#47;}
   * ];
   * }
   * ```
   *
   * To ensure that such a field is set, add the `required` rule.
   *
   * To learn which fields track presence, see the
   * [Field Presence cheat sheet](https://protobuf.dev/programming-guides/field_presence/#cheat).
   * </pre>
   *
   * <code>IGNORE_UNSPECIFIED = 0;</code>
   */
  public static final int IGNORE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Ignore rules if the field is unset, or set to the zero value.
   *
   * The zero value depends on the field type:
   * - For strings, the zero value is the empty string.
   * - For bytes, the zero value is empty bytes.
   * - For bool, the zero value is false.
   * - For numeric types, the zero value is zero.
   * - For enums, the zero value is the first defined enum value.
   * - For repeated fields, the zero is an empty list.
   * - For map fields, the zero is an empty map.
   * - For message fields, absence of the message (typically a null-value) is considered zero value.
   *
   * For fields that track presence (e.g. adding the `optional` label in proto3),
   * this a no-op and behavior is the same as the default `IGNORE_UNSPECIFIED`.
   * </pre>
   *
   * <code>IGNORE_IF_ZERO_VALUE = 1;</code>
   */
  public static final int IGNORE_IF_ZERO_VALUE_VALUE = 1;
  /**
   * <pre>
   * Always ignore rules, including the `required` rule.
   *
   * This is useful for ignoring the rules of a referenced message, or to
   * temporarily ignore rules during development.
   *
   * ```proto
   * message MyMessage {
   * // The field's rules will always be ignored, including any validations
   * // on value's fields.
   * MyOtherMessage value = 1 [
   * (buf.validate.field).ignore = IGNORE_ALWAYS];
   * }
   * ```
   * </pre>
   *
   * <code>IGNORE_ALWAYS = 3;</code>
   */
  public static final int IGNORE_ALWAYS_VALUE = 3;


  public final int getNumber() {
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Ignore valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Ignore forNumber(int value) {
    switch (value) {
      case 0: return IGNORE_UNSPECIFIED;
      case 1: return IGNORE_IF_ZERO_VALUE;
      case 3: return IGNORE_ALWAYS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Ignore>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Ignore> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Ignore>() {
          public Ignore findValueByNumber(int number) {
            return Ignore.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return build.buf.validate.ValidateProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Ignore[] VALUES = values();

  public static Ignore valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Ignore(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:buf.validate.Ignore)
}

