// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: buf/validate/validate.proto
// Protobuf Java Version: 4.32.0

package build.buf.validate;

@com.google.protobuf.Generated
public final class ValidateProto {
  private ValidateProto() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 0,
      /* suffix= */ "",
      ValidateProto.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
    registry.add(build.buf.validate.ValidateProto.message);
    registry.add(build.buf.validate.ValidateProto.oneof);
    registry.add(build.buf.validate.ValidateProto.field);
    registry.add(build.buf.validate.ValidateProto.predefined);
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public static final int MESSAGE_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this message. By default,
   * no validation is performed against a message.
   * </pre>
   *
   * <code>extend .google.protobuf.MessageOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.MessageOptions,
      build.buf.validate.MessageRules> message = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.MessageRules.class,
        build.buf.validate.MessageRules.getDefaultInstance());
  public static final int ONEOF_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this oneof. By default,
   * no validation is performed against a oneof.
   * </pre>
   *
   * <code>extend .google.protobuf.OneofOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.OneofOptions,
      build.buf.validate.OneofRules> oneof = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.OneofRules.class,
        build.buf.validate.OneofRules.getDefaultInstance());
  public static final int FIELD_FIELD_NUMBER = 1159;
  /**
   * <pre>
   * Rules specify the validations to be performed on this field. By default,
   * no validation is performed against a field.
   * </pre>
   *
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      build.buf.validate.FieldRules> field = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.FieldRules.class,
        build.buf.validate.FieldRules.getDefaultInstance());
  public static final int PREDEFINED_FIELD_NUMBER = 1160;
  /**
   * <pre>
   * Specifies predefined rules. When extending a standard rule message,
   * this adds additional CEL expressions that apply when the extension is used.
   *
   * ```proto
   * extend buf.validate.Int32Rules {
   * bool is_zero [(buf.validate.predefined).cel = {
   * id: "int32.is_zero",
   * message: "value must be zero",
   * expression: "!rule || this == 0",
   * }];
   * }
   *
   * message Foo {
   * int32 reserved = 1 [(buf.validate.field).int32.(is_zero) = true];
   * }
   * ```
   * </pre>
   *
   * <code>extend .google.protobuf.FieldOptions { ... }</code>
   */
  public static final
    com.google.protobuf.GeneratedMessage.GeneratedExtension<
      com.google.protobuf.DescriptorProtos.FieldOptions,
      build.buf.validate.PredefinedRules> predefined = com.google.protobuf.GeneratedMessage
          .newFileScopedGeneratedExtension(
        build.buf.validate.PredefinedRules.class,
        build.buf.validate.PredefinedRules.getDefaultInstance());
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Rule_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Rule_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MessageRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_MessageRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MessageOneofRule_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_MessageOneofRule_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_OneofRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_OneofRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FieldRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_FieldRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_PredefinedRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_PredefinedRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FloatRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_FloatRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DoubleRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_DoubleRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Int32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Int64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Int64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_UInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_UInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_UInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_SInt32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SInt64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_SInt64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Fixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Fixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Fixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed32Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_SFixed32Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_SFixed64Rules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_SFixed64Rules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BoolRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_BoolRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_StringRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_StringRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_BytesRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_BytesRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_EnumRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_EnumRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_RepeatedRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_RepeatedRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_MapRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_MapRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_AnyRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_AnyRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_DurationRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_DurationRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_TimestampRules_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_TimestampRules_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Violations_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Violations_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_Violation_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_Violation_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FieldPath_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_FieldPath_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_buf_validate_FieldPathElement_descriptor;
  static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_buf_validate_FieldPathElement_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033buf/validate/validate.proto\022\014buf.valid" +
      "ate\032 google/protobuf/descriptor.proto\032\036g" +
      "oogle/protobuf/duration.proto\032\037google/pr" +
      "otobuf/timestamp.proto\"P\n\004Rule\022\016\n\002id\030\001 \001" +
      "(\tR\002id\022\030\n\007message\030\002 \001(\tR\007message\022\036\n\nexpr" +
      "ession\030\003 \001(\tR\nexpression\"z\n\014MessageRules" +
      "\022$\n\003cel\030\003 \003(\0132\022.buf.validate.RuleR\003cel\0224" +
      "\n\005oneof\030\004 \003(\0132\036.buf.validate.MessageOneo" +
      "fRuleR\005oneofJ\004\010\001\020\002R\010disabled\"F\n\020MessageO" +
      "neofRule\022\026\n\006fields\030\001 \003(\tR\006fields\022\032\n\010requ" +
      "ired\030\002 \001(\010R\010required\"(\n\nOneofRules\022\032\n\010re" +
      "quired\030\001 \001(\010R\010required\"\375\t\n\nFieldRules\022$\n" +
      "\003cel\030\027 \003(\0132\022.buf.validate.RuleR\003cel\022\032\n\010r" +
      "equired\030\031 \001(\010R\010required\022,\n\006ignore\030\033 \001(\0162" +
      "\024.buf.validate.IgnoreR\006ignore\0220\n\005float\030\001" +
      " \001(\0132\030.buf.validate.FloatRulesH\000R\005float\022" +
      "3\n\006double\030\002 \001(\0132\031.buf.validate.DoubleRul" +
      "esH\000R\006double\0220\n\005int32\030\003 \001(\0132\030.buf.valida" +
      "te.Int32RulesH\000R\005int32\0220\n\005int64\030\004 \001(\0132\030." +
      "buf.validate.Int64RulesH\000R\005int64\0223\n\006uint" +
      "32\030\005 \001(\0132\031.buf.validate.UInt32RulesH\000R\006u" +
      "int32\0223\n\006uint64\030\006 \001(\0132\031.buf.validate.UIn" +
      "t64RulesH\000R\006uint64\0223\n\006sint32\030\007 \001(\0132\031.buf" +
      ".validate.SInt32RulesH\000R\006sint32\0223\n\006sint6" +
      "4\030\010 \001(\0132\031.buf.validate.SInt64RulesH\000R\006si" +
      "nt64\0226\n\007fixed32\030\t \001(\0132\032.buf.validate.Fix" +
      "ed32RulesH\000R\007fixed32\0226\n\007fixed64\030\n \001(\0132\032." +
      "buf.validate.Fixed64RulesH\000R\007fixed64\0229\n\010" +
      "sfixed32\030\013 \001(\0132\033.buf.validate.SFixed32Ru" +
      "lesH\000R\010sfixed32\0229\n\010sfixed64\030\014 \001(\0132\033.buf." +
      "validate.SFixed64RulesH\000R\010sfixed64\022-\n\004bo" +
      "ol\030\r \001(\0132\027.buf.validate.BoolRulesH\000R\004boo" +
      "l\0223\n\006string\030\016 \001(\0132\031.buf.validate.StringR" +
      "ulesH\000R\006string\0220\n\005bytes\030\017 \001(\0132\030.buf.vali" +
      "date.BytesRulesH\000R\005bytes\022-\n\004enum\030\020 \001(\0132\027" +
      ".buf.validate.EnumRulesH\000R\004enum\0229\n\010repea" +
      "ted\030\022 \001(\0132\033.buf.validate.RepeatedRulesH\000" +
      "R\010repeated\022*\n\003map\030\023 \001(\0132\026.buf.validate.M" +
      "apRulesH\000R\003map\022*\n\003any\030\024 \001(\0132\026.buf.valida" +
      "te.AnyRulesH\000R\003any\0229\n\010duration\030\025 \001(\0132\033.b" +
      "uf.validate.DurationRulesH\000R\010duration\022<\n" +
      "\ttimestamp\030\026 \001(\0132\034.buf.validate.Timestam" +
      "pRulesH\000R\ttimestampB\006\n\004typeJ\004\010\030\020\031J\004\010\032\020\033R" +
      "\007skippedR\014ignore_empty\"Z\n\017PredefinedRule" +
      "s\022$\n\003cel\030\001 \003(\0132\022.buf.validate.RuleR\003celJ" +
      "\004\010\030\020\031J\004\010\032\020\033R\007skippedR\014ignore_empty\"\220\030\n\nF" +
      "loatRules\022\212\001\n\005const\030\001 \001(\002Bt\302Hq\no\n\013float." +
      "const\032`this != getField(rules, \'const\') " +
      "? \'value must equal %s\'.format([getField" +
      "(rules, \'const\')]) : \'\'R\005const\022\243\001\n\002lt\030\002 " +
      "\001(\002B\220\001\302H\214\001\n\211\001\n\010float.lt\032}!has(rules.gte)" +
      " && !has(rules.gt) && (this.isNan() || t" +
      "his >= rules.lt)? \'value must be less th" +
      "an %s\'.format([rules.lt]) : \'\'H\000R\002lt\022\264\001\n" +
      "\003lte\030\003 \001(\002B\237\001\302H\233\001\n\230\001\n\tfloat.lte\032\212\001!has(r" +
      "ules.gte) && !has(rules.gt) && (this.isN" +
      "an() || this > rules.lte)? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\363\007\n\002gt\030\004 \001(\002B\340\007\302H\334\007\n" +
      "\215\001\n\010float.gt\032\200\001!has(rules.lt) && !has(ru" +
      "les.lte) && (this.isNan() || this <= rul" +
      "es.gt)? \'value must be greater than %s\'." +
      "format([rules.gt]) : \'\'\n\303\001\n\013float.gt_lt\032" +
      "\263\001has(rules.lt) && rules.lt >= rules.gt " +
      "&& (this.isNan() || this >= rules.lt || " +
      "this <= rules.gt)? \'value must be greate" +
      "r than %s and less than %s\'.format([rule" +
      "s.gt, rules.lt]) : \'\'\n\315\001\n\025float.gt_lt_ex" +
      "clusive\032\263\001has(rules.lt) && rules.lt < ru" +
      "les.gt && (this.isNan() || (rules.lt <= " +
      "this && this <= rules.gt))? \'value must " +
      "be greater than %s or less than %s\'.form" +
      "at([rules.gt, rules.lt]) : \'\'\n\323\001\n\014float." +
      "gt_lte\032\302\001has(rules.lte) && rules.lte >= " +
      "rules.gt && (this.isNan() || this > rule" +
      "s.lte || this <= rules.gt)? \'value must " +
      "be greater than %s and less than or equa" +
      "l to %s\'.format([rules.gt, rules.lte]) :" +
      " \'\'\n\335\001\n\026float.gt_lte_exclusive\032\302\001has(rul" +
      "es.lte) && rules.lte < rules.gt && (this" +
      ".isNan() || (rules.lte < this && this <=" +
      " rules.gt))? \'value must be greater than" +
      " %s or less than or equal to %s\'.format(" +
      "[rules.gt, rules.lte]) : \'\'H\001R\002gt\022\277\010\n\003gt" +
      "e\030\005 \001(\002B\252\010\302H\246\010\n\233\001\n\tfloat.gte\032\215\001!has(rule" +
      "s.lt) && !has(rules.lte) && (this.isNan(" +
      ") || this < rules.gte)? \'value must be g" +
      "reater than or equal to %s\'.format([rule" +
      "s.gte]) : \'\'\n\322\001\n\014float.gte_lt\032\301\001has(rule" +
      "s.lt) && rules.lt >= rules.gte && (this." +
      "isNan() || this >= rules.lt || this < ru" +
      "les.gte)? \'value must be greater than or" +
      " equal to %s and less than %s\'.format([r" +
      "ules.gte, rules.lt]) : \'\'\n\334\001\n\026float.gte_" +
      "lt_exclusive\032\301\001has(rules.lt) && rules.lt" +
      " < rules.gte && (this.isNan() || (rules." +
      "lt <= this && this < rules.gte))? \'value" +
      " must be greater than or equal to %s or " +
      "less than %s\'.format([rules.gte, rules.l" +
      "t]) : \'\'\n\342\001\n\rfloat.gte_lte\032\320\001has(rules.l" +
      "te) && rules.lte >= rules.gte && (this.i" +
      "sNan() || this > rules.lte || this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s and less than or equal to %s" +
      "\'.format([rules.gte, rules.lte]) : \'\'\n\354\001" +
      "\n\027float.gte_lte_exclusive\032\320\001has(rules.lt" +
      "e) && rules.lte < rules.gte && (this.isN" +
      "an() || (rules.lte < this && this < rule" +
      "s.gte))? \'value must be greater than or " +
      "equal to %s or less than or equal to %s\'" +
      ".format([rules.gte, rules.lte]) : \'\'H\001R\003" +
      "gte\022\203\001\n\002in\030\006 \003(\002Bs\302Hp\nn\n\010float.in\032b!(thi" +
      "s in getField(rules, \'in\')) ? \'value mus" +
      "t be in list %s\'.format([getField(rules," +
      " \'in\')]) : \'\'R\002in\022}\n\006not_in\030\007 \003(\002Bf\302Hc\na" +
      "\n\014float.not_in\032Qthis in rules.not_in ? \'" +
      "value must not be in list %s\'.format([ru" +
      "les.not_in]) : \'\'R\005notIn\022}\n\006finite\030\010 \001(\010" +
      "Be\302Hb\n`\n\014float.finite\032Prules.finite ? (t" +
      "his.isNan() || this.isInf() ? \'value mus" +
      "t be finite\' : \'\') : \'\'R\006finite\0224\n\007examp" +
      "le\030\t \003(\002B\032\302H\027\n\025\n\rfloat.example\032\004trueR\007ex" +
      "ample*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater" +
      "_than\"\242\030\n\013DoubleRules\022\213\001\n\005const\030\001 \001(\001Bu\302" +
      "Hr\np\n\014double.const\032`this != getField(rul" +
      "es, \'const\') ? \'value must equal %s\'.for" +
      "mat([getField(rules, \'const\')]) : \'\'R\005co" +
      "nst\022\244\001\n\002lt\030\002 \001(\001B\221\001\302H\215\001\n\212\001\n\tdouble.lt\032}!" +
      "has(rules.gte) && !has(rules.gt) && (thi" +
      "s.isNan() || this >= rules.lt)? \'value m" +
      "ust be less than %s\'.format([rules.lt]) " +
      ": \'\'H\000R\002lt\022\265\001\n\003lte\030\003 \001(\001B\240\001\302H\234\001\n\231\001\n\ndoub" +
      "le.lte\032\212\001!has(rules.gte) && !has(rules.g" +
      "t) && (this.isNan() || this > rules.lte)" +
      "? \'value must be less than or equal to %" +
      "s\'.format([rules.lte]) : \'\'H\000R\003lte\022\370\007\n\002g" +
      "t\030\004 \001(\001B\345\007\302H\341\007\n\216\001\n\tdouble.gt\032\200\001!has(rule" +
      "s.lt) && !has(rules.lte) && (this.isNan(" +
      ") || this <= rules.gt)? \'value must be g" +
      "reater than %s\'.format([rules.gt]) : \'\'\n" +
      "\304\001\n\014double.gt_lt\032\263\001has(rules.lt) && rule" +
      "s.lt >= rules.gt && (this.isNan() || thi" +
      "s >= rules.lt || this <= rules.gt)? \'val" +
      "ue must be greater than %s and less than" +
      " %s\'.format([rules.gt, rules.lt]) : \'\'\n\316" +
      "\001\n\026double.gt_lt_exclusive\032\263\001has(rules.lt" +
      ") && rules.lt < rules.gt && (this.isNan(" +
      ") || (rules.lt <= this && this <= rules." +
      "gt))? \'value must be greater than %s or " +
      "less than %s\'.format([rules.gt, rules.lt" +
      "]) : \'\'\n\324\001\n\rdouble.gt_lte\032\302\001has(rules.lt" +
      "e) && rules.lte >= rules.gt && (this.isN" +
      "an() || this > rules.lte || this <= rule" +
      "s.gt)? \'value must be greater than %s an" +
      "d less than or equal to %s\'.format([rule" +
      "s.gt, rules.lte]) : \'\'\n\336\001\n\027double.gt_lte" +
      "_exclusive\032\302\001has(rules.lte) && rules.lte" +
      " < rules.gt && (this.isNan() || (rules.l" +
      "te < this && this <= rules.gt))? \'value " +
      "must be greater than %s or less than or " +
      "equal to %s\'.format([rules.gt, rules.lte" +
      "]) : \'\'H\001R\002gt\022\304\010\n\003gte\030\005 \001(\001B\257\010\302H\253\010\n\234\001\n\nd" +
      "ouble.gte\032\215\001!has(rules.lt) && !has(rules" +
      ".lte) && (this.isNan() || this < rules.g" +
      "te)? \'value must be greater than or equa" +
      "l to %s\'.format([rules.gte]) : \'\'\n\323\001\n\rdo" +
      "uble.gte_lt\032\301\001has(rules.lt) && rules.lt " +
      ">= rules.gte && (this.isNan() || this >=" +
      " rules.lt || this < rules.gte)? \'value m" +
      "ust be greater than or equal to %s and l" +
      "ess than %s\'.format([rules.gte, rules.lt" +
      "]) : \'\'\n\335\001\n\027double.gte_lt_exclusive\032\301\001ha" +
      "s(rules.lt) && rules.lt < rules.gte && (" +
      "this.isNan() || (rules.lt <= this && thi" +
      "s < rules.gte))? \'value must be greater " +
      "than or equal to %s or less than %s\'.for" +
      "mat([rules.gte, rules.lt]) : \'\'\n\343\001\n\016doub" +
      "le.gte_lte\032\320\001has(rules.lte) && rules.lte" +
      " >= rules.gte && (this.isNan() || this >" +
      " rules.lte || this < rules.gte)? \'value " +
      "must be greater than or equal to %s and " +
      "less than or equal to %s\'.format([rules." +
      "gte, rules.lte]) : \'\'\n\355\001\n\030double.gte_lte" +
      "_exclusive\032\320\001has(rules.lte) && rules.lte" +
      " < rules.gte && (this.isNan() || (rules." +
      "lte < this && this < rules.gte))? \'value" +
      " must be greater than or equal to %s or " +
      "less than or equal to %s\'.format([rules." +
      "gte, rules.lte]) : \'\'H\001R\003gte\022\204\001\n\002in\030\006 \003(" +
      "\001Bt\302Hq\no\n\tdouble.in\032b!(this in getField(" +
      "rules, \'in\')) ? \'value must be in list %" +
      "s\'.format([getField(rules, \'in\')]) : \'\'R" +
      "\002in\022~\n\006not_in\030\007 \003(\001Bg\302Hd\nb\n\rdouble.not_i" +
      "n\032Qthis in rules.not_in ? \'value must no" +
      "t be in list %s\'.format([rules.not_in]) " +
      ": \'\'R\005notIn\022~\n\006finite\030\010 \001(\010Bf\302Hc\na\n\rdoub" +
      "le.finite\032Prules.finite ? (this.isNan() " +
      "|| this.isInf() ? \'value must be finite\'" +
      " : \'\') : \'\'R\006finite\0225\n\007example\030\t \003(\001B\033\302H" +
      "\030\n\026\n\016double.example\032\004trueR\007example*\t\010\350\007\020" +
      "\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_than\"\272\025\n\nI" +
      "nt32Rules\022\212\001\n\005const\030\001 \001(\005Bt\302Hq\no\n\013int32." +
      "const\032`this != getField(rules, \'const\') " +
      "? \'value must equal %s\'.format([getField" +
      "(rules, \'const\')]) : \'\'R\005const\022\216\001\n\002lt\030\002 " +
      "\001(\005B|\302Hy\nw\n\010int32.lt\032k!has(rules.gte) &&" +
      " !has(rules.gt) && this >= rules.lt? \'va" +
      "lue must be less than %s\'.format([rules." +
      "lt]) : \'\'H\000R\002lt\022\241\001\n\003lte\030\003 \001(\005B\214\001\302H\210\001\n\205\001\n" +
      "\tint32.lte\032x!has(rules.gte) && !has(rule" +
      "s.gt) && this > rules.lte? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\233\007\n\002gt\030\004 \001(\005B\210\007\302H\204\007\n" +
      "z\n\010int32.gt\032n!has(rules.lt) && !has(rule" +
      "s.lte) && this <= rules.gt? \'value must " +
      "be greater than %s\'.format([rules.gt]) :" +
      " \'\'\n\263\001\n\013int32.gt_lt\032\243\001has(rules.lt) && r" +
      "ules.lt >= rules.gt && (this >= rules.lt" +
      " || this <= rules.gt)? \'value must be gr" +
      "eater than %s and less than %s\'.format([" +
      "rules.gt, rules.lt]) : \'\'\n\273\001\n\025int32.gt_l" +
      "t_exclusive\032\241\001has(rules.lt) && rules.lt " +
      "< rules.gt && (rules.lt <= this && this " +
      "<= rules.gt)? \'value must be greater tha" +
      "n %s or less than %s\'.format([rules.gt, " +
      "rules.lt]) : \'\'\n\303\001\n\014int32.gt_lte\032\262\001has(r" +
      "ules.lte) && rules.lte >= rules.gt && (t" +
      "his > rules.lte || this <= rules.gt)? \'v" +
      "alue must be greater than %s and less th" +
      "an or equal to %s\'.format([rules.gt, rul" +
      "es.lte]) : \'\'\n\313\001\n\026int32.gt_lte_exclusive" +
      "\032\260\001has(rules.lte) && rules.lte < rules.g" +
      "t && (rules.lte < this && this <= rules." +
      "gt)? \'value must be greater than %s or l" +
      "ess than or equal to %s\'.format([rules.g" +
      "t, rules.lte]) : \'\'H\001R\002gt\022\350\007\n\003gte\030\005 \001(\005B" +
      "\323\007\302H\317\007\n\210\001\n\tint32.gte\032{!has(rules.lt) && " +
      "!has(rules.lte) && this < rules.gte? \'va" +
      "lue must be greater than or equal to %s\'" +
      ".format([rules.gte]) : \'\'\n\302\001\n\014int32.gte_" +
      "lt\032\261\001has(rules.lt) && rules.lt >= rules." +
      "gte && (this >= rules.lt || this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s and less than %s\'.format([rule" +
      "s.gte, rules.lt]) : \'\'\n\312\001\n\026int32.gte_lt_" +
      "exclusive\032\257\001has(rules.lt) && rules.lt < " +
      "rules.gte && (rules.lt <= this && this <" +
      " rules.gte)? \'value must be greater than" +
      " or equal to %s or less than %s\'.format(" +
      "[rules.gte, rules.lt]) : \'\'\n\322\001\n\rint32.gt" +
      "e_lte\032\300\001has(rules.lte) && rules.lte >= r" +
      "ules.gte && (this > rules.lte || this < " +
      "rules.gte)? \'value must be greater than " +
      "or equal to %s and less than or equal to" +
      " %s\'.format([rules.gte, rules.lte]) : \'\'" +
      "\n\332\001\n\027int32.gte_lte_exclusive\032\276\001has(rules" +
      ".lte) && rules.lte < rules.gte && (rules" +
      ".lte < this && this < rules.gte)? \'value" +
      " must be greater than or equal to %s or " +
      "less than or equal to %s\'.format([rules." +
      "gte, rules.lte]) : \'\'H\001R\003gte\022\203\001\n\002in\030\006 \003(" +
      "\005Bs\302Hp\nn\n\010int32.in\032b!(this in getField(r" +
      "ules, \'in\')) ? \'value must be in list %s" +
      "\'.format([getField(rules, \'in\')]) : \'\'R\002" +
      "in\022}\n\006not_in\030\007 \003(\005Bf\302Hc\na\n\014int32.not_in\032" +
      "Qthis in rules.not_in ? \'value must not " +
      "be in list %s\'.format([rules.not_in]) : " +
      "\'\'R\005notIn\0224\n\007example\030\010 \003(\005B\032\302H\027\n\025\n\rint32" +
      ".example\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tle" +
      "ss_thanB\016\n\014greater_than\"\272\025\n\nInt64Rules\022\212" +
      "\001\n\005const\030\001 \001(\003Bt\302Hq\no\n\013int64.const\032`this" +
      " != getField(rules, \'const\') ? \'value mu" +
      "st equal %s\'.format([getField(rules, \'co" +
      "nst\')]) : \'\'R\005const\022\216\001\n\002lt\030\002 \001(\003B|\302Hy\nw\n" +
      "\010int64.lt\032k!has(rules.gte) && !has(rules" +
      ".gt) && this >= rules.lt? \'value must be" +
      " less than %s\'.format([rules.lt]) : \'\'H\000" +
      "R\002lt\022\241\001\n\003lte\030\003 \001(\003B\214\001\302H\210\001\n\205\001\n\tint64.lte\032" +
      "x!has(rules.gte) && !has(rules.gt) && th" +
      "is > rules.lte? \'value must be less than" +
      " or equal to %s\'.format([rules.lte]) : \'" +
      "\'H\000R\003lte\022\233\007\n\002gt\030\004 \001(\003B\210\007\302H\204\007\nz\n\010int64.gt" +
      "\032n!has(rules.lt) && !has(rules.lte) && t" +
      "his <= rules.gt? \'value must be greater " +
      "than %s\'.format([rules.gt]) : \'\'\n\263\001\n\013int" +
      "64.gt_lt\032\243\001has(rules.lt) && rules.lt >= " +
      "rules.gt && (this >= rules.lt || this <=" +
      " rules.gt)? \'value must be greater than " +
      "%s and less than %s\'.format([rules.gt, r" +
      "ules.lt]) : \'\'\n\273\001\n\025int64.gt_lt_exclusive" +
      "\032\241\001has(rules.lt) && rules.lt < rules.gt " +
      "&& (rules.lt <= this && this <= rules.gt" +
      ")? \'value must be greater than %s or les" +
      "s than %s\'.format([rules.gt, rules.lt]) " +
      ": \'\'\n\303\001\n\014int64.gt_lte\032\262\001has(rules.lte) &" +
      "& rules.lte >= rules.gt && (this > rules" +
      ".lte || this <= rules.gt)? \'value must b" +
      "e greater than %s and less than or equal" +
      " to %s\'.format([rules.gt, rules.lte]) : " +
      "\'\'\n\313\001\n\026int64.gt_lte_exclusive\032\260\001has(rule" +
      "s.lte) && rules.lte < rules.gt && (rules" +
      ".lte < this && this <= rules.gt)? \'value" +
      " must be greater than %s or less than or" +
      " equal to %s\'.format([rules.gt, rules.lt" +
      "e]) : \'\'H\001R\002gt\022\350\007\n\003gte\030\005 \001(\003B\323\007\302H\317\007\n\210\001\n\t" +
      "int64.gte\032{!has(rules.lt) && !has(rules." +
      "lte) && this < rules.gte? \'value must be" +
      " greater than or equal to %s\'.format([ru" +
      "les.gte]) : \'\'\n\302\001\n\014int64.gte_lt\032\261\001has(ru" +
      "les.lt) && rules.lt >= rules.gte && (thi" +
      "s >= rules.lt || this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s a" +
      "nd less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\312\001\n\026int64.gte_lt_exclusive\032\257" +
      "\001has(rules.lt) && rules.lt < rules.gte &" +
      "& (rules.lt <= this && this < rules.gte)" +
      "? \'value must be greater than or equal t" +
      "o %s or less than %s\'.format([rules.gte," +
      " rules.lt]) : \'\'\n\322\001\n\rint64.gte_lte\032\300\001has" +
      "(rules.lte) && rules.lte >= rules.gte &&" +
      " (this > rules.lte || this < rules.gte)?" +
      " \'value must be greater than or equal to" +
      " %s and less than or equal to %s\'.format" +
      "([rules.gte, rules.lte]) : \'\'\n\332\001\n\027int64." +
      "gte_lte_exclusive\032\276\001has(rules.lte) && ru" +
      "les.lte < rules.gte && (rules.lte < this" +
      " && this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s or less than o" +
      "r equal to %s\'.format([rules.gte, rules." +
      "lte]) : \'\'H\001R\003gte\022\203\001\n\002in\030\006 \003(\003Bs\302Hp\nn\n\010i" +
      "nt64.in\032b!(this in getField(rules, \'in\')" +
      ") ? \'value must be in list %s\'.format([g" +
      "etField(rules, \'in\')]) : \'\'R\002in\022}\n\006not_i" +
      "n\030\007 \003(\003Bf\302Hc\na\n\014int64.not_in\032Qthis in ru" +
      "les.not_in ? \'value must not be in list " +
      "%s\'.format([rules.not_in]) : \'\'R\005notIn\0224" +
      "\n\007example\030\t \003(\003B\032\302H\027\n\025\n\rint64.example\032\004t" +
      "rueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014" +
      "greater_than\"\313\025\n\013UInt32Rules\022\213\001\n\005const\030\001" +
      " \001(\rBu\302Hr\np\n\014uint32.const\032`this != getFi" +
      "eld(rules, \'const\') ? \'value must equal " +
      "%s\'.format([getField(rules, \'const\')]) :" +
      " \'\'R\005const\022\217\001\n\002lt\030\002 \001(\rB}\302Hz\nx\n\tuint32.l" +
      "t\032k!has(rules.gte) && !has(rules.gt) && " +
      "this >= rules.lt? \'value must be less th" +
      "an %s\'.format([rules.lt]) : \'\'H\000R\002lt\022\242\001\n" +
      "\003lte\030\003 \001(\rB\215\001\302H\211\001\n\206\001\n\nuint32.lte\032x!has(r" +
      "ules.gte) && !has(rules.gt) && this > ru" +
      "les.lte? \'value must be less than or equ" +
      "al to %s\'.format([rules.lte]) : \'\'H\000R\003lt" +
      "e\022\240\007\n\002gt\030\004 \001(\rB\215\007\302H\211\007\n{\n\tuint32.gt\032n!has" +
      "(rules.lt) && !has(rules.lte) && this <=" +
      " rules.gt? \'value must be greater than %" +
      "s\'.format([rules.gt]) : \'\'\n\264\001\n\014uint32.gt" +
      "_lt\032\243\001has(rules.lt) && rules.lt >= rules" +
      ".gt && (this >= rules.lt || this <= rule" +
      "s.gt)? \'value must be greater than %s an" +
      "d less than %s\'.format([rules.gt, rules." +
      "lt]) : \'\'\n\274\001\n\026uint32.gt_lt_exclusive\032\241\001h" +
      "as(rules.lt) && rules.lt < rules.gt && (" +
      "rules.lt <= this && this <= rules.gt)? \'" +
      "value must be greater than %s or less th" +
      "an %s\'.format([rules.gt, rules.lt]) : \'\'" +
      "\n\304\001\n\ruint32.gt_lte\032\262\001has(rules.lte) && r" +
      "ules.lte >= rules.gt && (this > rules.lt" +
      "e || this <= rules.gt)? \'value must be g" +
      "reater than %s and less than or equal to" +
      " %s\'.format([rules.gt, rules.lte]) : \'\'\n" +
      "\314\001\n\027uint32.gt_lte_exclusive\032\260\001has(rules." +
      "lte) && rules.lte < rules.gt && (rules.l" +
      "te < this && this <= rules.gt)? \'value m" +
      "ust be greater than %s or less than or e" +
      "qual to %s\'.format([rules.gt, rules.lte]" +
      ") : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\rB\330\007\302H\324\007\n\211\001\n\nui" +
      "nt32.gte\032{!has(rules.lt) && !has(rules.l" +
      "te) && this < rules.gte? \'value must be " +
      "greater than or equal to %s\'.format([rul" +
      "es.gte]) : \'\'\n\303\001\n\ruint32.gte_lt\032\261\001has(ru" +
      "les.lt) && rules.lt >= rules.gte && (thi" +
      "s >= rules.lt || this < rules.gte)? \'val" +
      "ue must be greater than or equal to %s a" +
      "nd less than %s\'.format([rules.gte, rule" +
      "s.lt]) : \'\'\n\313\001\n\027uint32.gte_lt_exclusive\032" +
      "\257\001has(rules.lt) && rules.lt < rules.gte " +
      "&& (rules.lt <= this && this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s or less than %s\'.format([rules.gte" +
      ", rules.lt]) : \'\'\n\323\001\n\016uint32.gte_lte\032\300\001h" +
      "as(rules.lte) && rules.lte >= rules.gte " +
      "&& (this > rules.lte || this < rules.gte" +
      ")? \'value must be greater than or equal " +
      "to %s and less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'\n\333\001\n\030uint" +
      "32.gte_lte_exclusive\032\276\001has(rules.lte) &&" +
      " rules.lte < rules.gte && (rules.lte < t" +
      "his && this < rules.gte)? \'value must be" +
      " greater than or equal to %s or less tha" +
      "n or equal to %s\'.format([rules.gte, rul" +
      "es.lte]) : \'\'H\001R\003gte\022\204\001\n\002in\030\006 \003(\rBt\302Hq\no" +
      "\n\tuint32.in\032b!(this in getField(rules, \'",
      "in\')) ? \'value must be in list %s\'.forma" +
      "t([getField(rules, \'in\')]) : \'\'R\002in\022~\n\006n" +
      "ot_in\030\007 \003(\rBg\302Hd\nb\n\ruint32.not_in\032Qthis " +
      "in rules.not_in ? \'value must not be in " +
      "list %s\'.format([rules.not_in]) : \'\'R\005no" +
      "tIn\0225\n\007example\030\010 \003(\rB\033\302H\030\n\026\n\016uint32.exam" +
      "ple\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_th" +
      "anB\016\n\014greater_than\"\313\025\n\013UInt64Rules\022\213\001\n\005c" +
      "onst\030\001 \001(\004Bu\302Hr\np\n\014uint64.const\032`this !=" +
      " getField(rules, \'const\') ? \'value must " +
      "equal %s\'.format([getField(rules, \'const" +
      "\')]) : \'\'R\005const\022\217\001\n\002lt\030\002 \001(\004B}\302Hz\nx\n\tui" +
      "nt64.lt\032k!has(rules.gte) && !has(rules.g" +
      "t) && this >= rules.lt? \'value must be l" +
      "ess than %s\'.format([rules.lt]) : \'\'H\000R\002" +
      "lt\022\242\001\n\003lte\030\003 \001(\004B\215\001\302H\211\001\n\206\001\n\nuint64.lte\032x" +
      "!has(rules.gte) && !has(rules.gt) && thi" +
      "s > rules.lte? \'value must be less than " +
      "or equal to %s\'.format([rules.lte]) : \'\'" +
      "H\000R\003lte\022\240\007\n\002gt\030\004 \001(\004B\215\007\302H\211\007\n{\n\tuint64.gt" +
      "\032n!has(rules.lt) && !has(rules.lte) && t" +
      "his <= rules.gt? \'value must be greater " +
      "than %s\'.format([rules.gt]) : \'\'\n\264\001\n\014uin" +
      "t64.gt_lt\032\243\001has(rules.lt) && rules.lt >=" +
      " rules.gt && (this >= rules.lt || this <" +
      "= rules.gt)? \'value must be greater than" +
      " %s and less than %s\'.format([rules.gt, " +
      "rules.lt]) : \'\'\n\274\001\n\026uint64.gt_lt_exclusi" +
      "ve\032\241\001has(rules.lt) && rules.lt < rules.g" +
      "t && (rules.lt <= this && this <= rules." +
      "gt)? \'value must be greater than %s or l" +
      "ess than %s\'.format([rules.gt, rules.lt]" +
      ") : \'\'\n\304\001\n\ruint64.gt_lte\032\262\001has(rules.lte" +
      ") && rules.lte >= rules.gt && (this > ru" +
      "les.lte || this <= rules.gt)? \'value mus" +
      "t be greater than %s and less than or eq" +
      "ual to %s\'.format([rules.gt, rules.lte])" +
      " : \'\'\n\314\001\n\027uint64.gt_lte_exclusive\032\260\001has(" +
      "rules.lte) && rules.lte < rules.gt && (r" +
      "ules.lte < this && this <= rules.gt)? \'v" +
      "alue must be greater than %s or less tha" +
      "n or equal to %s\'.format([rules.gt, rule" +
      "s.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\004B\330\007\302H\324\007\n" +
      "\211\001\n\nuint64.gte\032{!has(rules.lt) && !has(r" +
      "ules.lte) && this < rules.gte? \'value mu" +
      "st be greater than or equal to %s\'.forma" +
      "t([rules.gte]) : \'\'\n\303\001\n\ruint64.gte_lt\032\261\001" +
      "has(rules.lt) && rules.lt >= rules.gte &" +
      "& (this >= rules.lt || this < rules.gte)" +
      "? \'value must be greater than or equal t" +
      "o %s and less than %s\'.format([rules.gte" +
      ", rules.lt]) : \'\'\n\313\001\n\027uint64.gte_lt_excl" +
      "usive\032\257\001has(rules.lt) && rules.lt < rule" +
      "s.gte && (rules.lt <= this && this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s or less than %s\'.format([rul" +
      "es.gte, rules.lt]) : \'\'\n\323\001\n\016uint64.gte_l" +
      "te\032\300\001has(rules.lte) && rules.lte >= rule" +
      "s.gte && (this > rules.lte || this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s and less than or equal to %s" +
      "\'.format([rules.gte, rules.lte]) : \'\'\n\333\001" +
      "\n\030uint64.gte_lte_exclusive\032\276\001has(rules.l" +
      "te) && rules.lte < rules.gte && (rules.l" +
      "te < this && this < rules.gte)? \'value m" +
      "ust be greater than or equal to %s or le" +
      "ss than or equal to %s\'.format([rules.gt" +
      "e, rules.lte]) : \'\'H\001R\003gte\022\204\001\n\002in\030\006 \003(\004B" +
      "t\302Hq\no\n\tuint64.in\032b!(this in getField(ru" +
      "les, \'in\')) ? \'value must be in list %s\'" +
      ".format([getField(rules, \'in\')]) : \'\'R\002i" +
      "n\022~\n\006not_in\030\007 \003(\004Bg\302Hd\nb\n\ruint64.not_in\032" +
      "Qthis in rules.not_in ? \'value must not " +
      "be in list %s\'.format([rules.not_in]) : " +
      "\'\'R\005notIn\0225\n\007example\030\010 \003(\004B\033\302H\030\n\026\n\016uint6" +
      "4.example\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tl" +
      "ess_thanB\016\n\014greater_than\"\313\025\n\013SInt32Rules" +
      "\022\213\001\n\005const\030\001 \001(\021Bu\302Hr\np\n\014sint32.const\032`t" +
      "his != getField(rules, \'const\') ? \'value" +
      " must equal %s\'.format([getField(rules, " +
      "\'const\')]) : \'\'R\005const\022\217\001\n\002lt\030\002 \001(\021B}\302Hz" +
      "\nx\n\tsint32.lt\032k!has(rules.gte) && !has(r" +
      "ules.gt) && this >= rules.lt? \'value mus" +
      "t be less than %s\'.format([rules.lt]) : " +
      "\'\'H\000R\002lt\022\242\001\n\003lte\030\003 \001(\021B\215\001\302H\211\001\n\206\001\n\nsint32" +
      ".lte\032x!has(rules.gte) && !has(rules.gt) " +
      "&& this > rules.lte? \'value must be less" +
      " than or equal to %s\'.format([rules.lte]" +
      ") : \'\'H\000R\003lte\022\240\007\n\002gt\030\004 \001(\021B\215\007\302H\211\007\n{\n\tsin" +
      "t32.gt\032n!has(rules.lt) && !has(rules.lte" +
      ") && this <= rules.gt? \'value must be gr" +
      "eater than %s\'.format([rules.gt]) : \'\'\n\264" +
      "\001\n\014sint32.gt_lt\032\243\001has(rules.lt) && rules" +
      ".lt >= rules.gt && (this >= rules.lt || " +
      "this <= rules.gt)? \'value must be greate" +
      "r than %s and less than %s\'.format([rule" +
      "s.gt, rules.lt]) : \'\'\n\274\001\n\026sint32.gt_lt_e" +
      "xclusive\032\241\001has(rules.lt) && rules.lt < r" +
      "ules.gt && (rules.lt <= this && this <= " +
      "rules.gt)? \'value must be greater than %" +
      "s or less than %s\'.format([rules.gt, rul" +
      "es.lt]) : \'\'\n\304\001\n\rsint32.gt_lte\032\262\001has(rul" +
      "es.lte) && rules.lte >= rules.gt && (thi" +
      "s > rules.lte || this <= rules.gt)? \'val" +
      "ue must be greater than %s and less than" +
      " or equal to %s\'.format([rules.gt, rules" +
      ".lte]) : \'\'\n\314\001\n\027sint32.gt_lte_exclusive\032" +
      "\260\001has(rules.lte) && rules.lte < rules.gt" +
      " && (rules.lte < this && this <= rules.g" +
      "t)? \'value must be greater than %s or le" +
      "ss than or equal to %s\'.format([rules.gt" +
      ", rules.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005 \001(\021B\330" +
      "\007\302H\324\007\n\211\001\n\nsint32.gte\032{!has(rules.lt) && " +
      "!has(rules.lte) && this < rules.gte? \'va" +
      "lue must be greater than or equal to %s\'" +
      ".format([rules.gte]) : \'\'\n\303\001\n\rsint32.gte" +
      "_lt\032\261\001has(rules.lt) && rules.lt >= rules" +
      ".gte && (this >= rules.lt || this < rule" +
      "s.gte)? \'value must be greater than or e" +
      "qual to %s and less than %s\'.format([rul" +
      "es.gte, rules.lt]) : \'\'\n\313\001\n\027sint32.gte_l" +
      "t_exclusive\032\257\001has(rules.lt) && rules.lt " +
      "< rules.gte && (rules.lt <= this && this" +
      " < rules.gte)? \'value must be greater th" +
      "an or equal to %s or less than %s\'.forma" +
      "t([rules.gte, rules.lt]) : \'\'\n\323\001\n\016sint32" +
      ".gte_lte\032\300\001has(rules.lte) && rules.lte >" +
      "= rules.gte && (this > rules.lte || this" +
      " < rules.gte)? \'value must be greater th" +
      "an or equal to %s and less than or equal" +
      " to %s\'.format([rules.gte, rules.lte]) :" +
      " \'\'\n\333\001\n\030sint32.gte_lte_exclusive\032\276\001has(r" +
      "ules.lte) && rules.lte < rules.gte && (r" +
      "ules.lte < this && this < rules.gte)? \'v" +
      "alue must be greater than or equal to %s" +
      " or less than or equal to %s\'.format([ru" +
      "les.gte, rules.lte]) : \'\'H\001R\003gte\022\204\001\n\002in\030" +
      "\006 \003(\021Bt\302Hq\no\n\tsint32.in\032b!(this in getFi" +
      "eld(rules, \'in\')) ? \'value must be in li" +
      "st %s\'.format([getField(rules, \'in\')]) :" +
      " \'\'R\002in\022~\n\006not_in\030\007 \003(\021Bg\302Hd\nb\n\rsint32.n" +
      "ot_in\032Qthis in rules.not_in ? \'value mus" +
      "t not be in list %s\'.format([rules.not_i" +
      "n]) : \'\'R\005notIn\0225\n\007example\030\010 \003(\021B\033\302H\030\n\026\n" +
      "\016sint32.example\032\004trueR\007example*\t\010\350\007\020\200\200\200\200" +
      "\002B\013\n\tless_thanB\016\n\014greater_than\"\313\025\n\013SInt6" +
      "4Rules\022\213\001\n\005const\030\001 \001(\022Bu\302Hr\np\n\014sint64.co" +
      "nst\032`this != getField(rules, \'const\') ? " +
      "\'value must equal %s\'.format([getField(r" +
      "ules, \'const\')]) : \'\'R\005const\022\217\001\n\002lt\030\002 \001(" +
      "\022B}\302Hz\nx\n\tsint64.lt\032k!has(rules.gte) && " +
      "!has(rules.gt) && this >= rules.lt? \'val" +
      "ue must be less than %s\'.format([rules.l" +
      "t]) : \'\'H\000R\002lt\022\242\001\n\003lte\030\003 \001(\022B\215\001\302H\211\001\n\206\001\n\n" +
      "sint64.lte\032x!has(rules.gte) && !has(rule" +
      "s.gt) && this > rules.lte? \'value must b" +
      "e less than or equal to %s\'.format([rule" +
      "s.lte]) : \'\'H\000R\003lte\022\240\007\n\002gt\030\004 \001(\022B\215\007\302H\211\007\n" +
      "{\n\tsint64.gt\032n!has(rules.lt) && !has(rul" +
      "es.lte) && this <= rules.gt? \'value must" +
      " be greater than %s\'.format([rules.gt]) " +
      ": \'\'\n\264\001\n\014sint64.gt_lt\032\243\001has(rules.lt) &&" +
      " rules.lt >= rules.gt && (this >= rules." +
      "lt || this <= rules.gt)? \'value must be " +
      "greater than %s and less than %s\'.format" +
      "([rules.gt, rules.lt]) : \'\'\n\274\001\n\026sint64.g" +
      "t_lt_exclusive\032\241\001has(rules.lt) && rules." +
      "lt < rules.gt && (rules.lt <= this && th" +
      "is <= rules.gt)? \'value must be greater " +
      "than %s or less than %s\'.format([rules.g" +
      "t, rules.lt]) : \'\'\n\304\001\n\rsint64.gt_lte\032\262\001h" +
      "as(rules.lte) && rules.lte >= rules.gt &" +
      "& (this > rules.lte || this <= rules.gt)" +
      "? \'value must be greater than %s and les" +
      "s than or equal to %s\'.format([rules.gt," +
      " rules.lte]) : \'\'\n\314\001\n\027sint64.gt_lte_excl" +
      "usive\032\260\001has(rules.lte) && rules.lte < ru" +
      "les.gt && (rules.lte < this && this <= r" +
      "ules.gt)? \'value must be greater than %s" +
      " or less than or equal to %s\'.format([ru" +
      "les.gt, rules.lte]) : \'\'H\001R\002gt\022\355\007\n\003gte\030\005" +
      " \001(\022B\330\007\302H\324\007\n\211\001\n\nsint64.gte\032{!has(rules.l" +
      "t) && !has(rules.lte) && this < rules.gt" +
      "e? \'value must be greater than or equal " +
      "to %s\'.format([rules.gte]) : \'\'\n\303\001\n\rsint" +
      "64.gte_lt\032\261\001has(rules.lt) && rules.lt >=" +
      " rules.gte && (this >= rules.lt || this " +
      "< rules.gte)? \'value must be greater tha" +
      "n or equal to %s and less than %s\'.forma" +
      "t([rules.gte, rules.lt]) : \'\'\n\313\001\n\027sint64" +
      ".gte_lt_exclusive\032\257\001has(rules.lt) && rul" +
      "es.lt < rules.gte && (rules.lt <= this &" +
      "& this < rules.gte)? \'value must be grea" +
      "ter than or equal to %s or less than %s\'" +
      ".format([rules.gte, rules.lt]) : \'\'\n\323\001\n\016" +
      "sint64.gte_lte\032\300\001has(rules.lte) && rules" +
      ".lte >= rules.gte && (this > rules.lte |" +
      "| this < rules.gte)? \'value must be grea" +
      "ter than or equal to %s and less than or" +
      " equal to %s\'.format([rules.gte, rules.l" +
      "te]) : \'\'\n\333\001\n\030sint64.gte_lte_exclusive\032\276" +
      "\001has(rules.lte) && rules.lte < rules.gte" +
      " && (rules.lte < this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'H\001R\003gte\022\204" +
      "\001\n\002in\030\006 \003(\022Bt\302Hq\no\n\tsint64.in\032b!(this in" +
      " getField(rules, \'in\')) ? \'value must be" +
      " in list %s\'.format([getField(rules, \'in" +
      "\')]) : \'\'R\002in\022~\n\006not_in\030\007 \003(\022Bg\302Hd\nb\n\rsi" +
      "nt64.not_in\032Qthis in rules.not_in ? \'val" +
      "ue must not be in list %s\'.format([rules" +
      ".not_in]) : \'\'R\005notIn\0225\n\007example\030\010 \003(\022B\033" +
      "\302H\030\n\026\n\016sint64.example\032\004trueR\007example*\t\010\350" +
      "\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_than\"\334\025\n" +
      "\014Fixed32Rules\022\214\001\n\005const\030\001 \001(\007Bv\302Hs\nq\n\rfi" +
      "xed32.const\032`this != getField(rules, \'co" +
      "nst\') ? \'value must equal %s\'.format([ge" +
      "tField(rules, \'const\')]) : \'\'R\005const\022\220\001\n" +
      "\002lt\030\002 \001(\007B~\302H{\ny\n\nfixed32.lt\032k!has(rules" +
      ".gte) && !has(rules.gt) && this >= rules" +
      ".lt? \'value must be less than %s\'.format" +
      "([rules.lt]) : \'\'H\000R\002lt\022\243\001\n\003lte\030\003 \001(\007B\216\001" +
      "\302H\212\001\n\207\001\n\013fixed32.lte\032x!has(rules.gte) &&" +
      " !has(rules.gt) && this > rules.lte? \'va" +
      "lue must be less than or equal to %s\'.fo" +
      "rmat([rules.lte]) : \'\'H\000R\003lte\022\245\007\n\002gt\030\004 \001" +
      "(\007B\222\007\302H\216\007\n|\n\nfixed32.gt\032n!has(rules.lt) " +
      "&& !has(rules.lte) && this <= rules.gt? " +
      "\'value must be greater than %s\'.format([" +
      "rules.gt]) : \'\'\n\265\001\n\rfixed32.gt_lt\032\243\001has(" +
      "rules.lt) && rules.lt >= rules.gt && (th" +
      "is >= rules.lt || this <= rules.gt)? \'va" +
      "lue must be greater than %s and less tha" +
      "n %s\'.format([rules.gt, rules.lt]) : \'\'\n" +
      "\275\001\n\027fixed32.gt_lt_exclusive\032\241\001has(rules." +
      "lt) && rules.lt < rules.gt && (rules.lt " +
      "<= this && this <= rules.gt)? \'value mus" +
      "t be greater than %s or less than %s\'.fo" +
      "rmat([rules.gt, rules.lt]) : \'\'\n\305\001\n\016fixe" +
      "d32.gt_lte\032\262\001has(rules.lte) && rules.lte" +
      " >= rules.gt && (this > rules.lte || thi" +
      "s <= rules.gt)? \'value must be greater t" +
      "han %s and less than or equal to %s\'.for" +
      "mat([rules.gt, rules.lte]) : \'\'\n\315\001\n\030fixe" +
      "d32.gt_lte_exclusive\032\260\001has(rules.lte) &&" +
      " rules.lte < rules.gt && (rules.lte < th" +
      "is && this <= rules.gt)? \'value must be " +
      "greater than %s or less than or equal to" +
      " %s\'.format([rules.gt, rules.lte]) : \'\'H" +
      "\001R\002gt\022\362\007\n\003gte\030\005 \001(\007B\335\007\302H\331\007\n\212\001\n\013fixed32.g" +
      "te\032{!has(rules.lt) && !has(rules.lte) &&" +
      " this < rules.gte? \'value must be greate" +
      "r than or equal to %s\'.format([rules.gte" +
      "]) : \'\'\n\304\001\n\016fixed32.gte_lt\032\261\001has(rules.l" +
      "t) && rules.lt >= rules.gte && (this >= " +
      "rules.lt || this < rules.gte)? \'value mu" +
      "st be greater than or equal to %s and le" +
      "ss than %s\'.format([rules.gte, rules.lt]" +
      ") : \'\'\n\314\001\n\030fixed32.gte_lt_exclusive\032\257\001ha" +
      "s(rules.lt) && rules.lt < rules.gte && (" +
      "rules.lt <= this && this < rules.gte)? \'" +
      "value must be greater than or equal to %" +
      "s or less than %s\'.format([rules.gte, ru" +
      "les.lt]) : \'\'\n\324\001\n\017fixed32.gte_lte\032\300\001has(" +
      "rules.lte) && rules.lte >= rules.gte && " +
      "(this > rules.lte || this < rules.gte)? " +
      "\'value must be greater than or equal to " +
      "%s and less than or equal to %s\'.format(" +
      "[rules.gte, rules.lte]) : \'\'\n\334\001\n\031fixed32" +
      ".gte_lte_exclusive\032\276\001has(rules.lte) && r" +
      "ules.lte < rules.gte && (rules.lte < thi" +
      "s && this < rules.gte)? \'value must be g" +
      "reater than or equal to %s or less than " +
      "or equal to %s\'.format([rules.gte, rules" +
      ".lte]) : \'\'H\001R\003gte\022\205\001\n\002in\030\006 \003(\007Bu\302Hr\np\n\n" +
      "fixed32.in\032b!(this in getField(rules, \'i" +
      "n\')) ? \'value must be in list %s\'.format" +
      "([getField(rules, \'in\')]) : \'\'R\002in\022\177\n\006no" +
      "t_in\030\007 \003(\007Bh\302He\nc\n\016fixed32.not_in\032Qthis " +
      "in rules.not_in ? \'value must not be in " +
      "list %s\'.format([rules.not_in]) : \'\'R\005no" +
      "tIn\0226\n\007example\030\010 \003(\007B\034\302H\031\n\027\n\017fixed32.exa" +
      "mple\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_t" +
      "hanB\016\n\014greater_than\"\334\025\n\014Fixed64Rules\022\214\001\n" +
      "\005const\030\001 \001(\006Bv\302Hs\nq\n\rfixed64.const\032`this" +
      " != getField(rules, \'const\') ? \'value mu" +
      "st equal %s\'.format([getField(rules, \'co" +
      "nst\')]) : \'\'R\005const\022\220\001\n\002lt\030\002 \001(\006B~\302H{\ny\n" +
      "\nfixed64.lt\032k!has(rules.gte) && !has(rul" +
      "es.gt) && this >= rules.lt? \'value must " +
      "be less than %s\'.format([rules.lt]) : \'\'" +
      "H\000R\002lt\022\243\001\n\003lte\030\003 \001(\006B\216\001\302H\212\001\n\207\001\n\013fixed64." +
      "lte\032x!has(rules.gte) && !has(rules.gt) &" +
      "& this > rules.lte? \'value must be less " +
      "than or equal to %s\'.format([rules.lte])" +
      " : \'\'H\000R\003lte\022\245\007\n\002gt\030\004 \001(\006B\222\007\302H\216\007\n|\n\nfixe" +
      "d64.gt\032n!has(rules.lt) && !has(rules.lte" +
      ") && this <= rules.gt? \'value must be gr" +
      "eater than %s\'.format([rules.gt]) : \'\'\n\265" +
      "\001\n\rfixed64.gt_lt\032\243\001has(rules.lt) && rule" +
      "s.lt >= rules.gt && (this >= rules.lt ||" +
      " this <= rules.gt)? \'value must be great" +
      "er than %s and less than %s\'.format([rul" +
      "es.gt, rules.lt]) : \'\'\n\275\001\n\027fixed64.gt_lt" +
      "_exclusive\032\241\001has(rules.lt) && rules.lt <" +
      " rules.gt && (rules.lt <= this && this <" +
      "= rules.gt)? \'value must be greater than" +
      " %s or less than %s\'.format([rules.gt, r" +
      "ules.lt]) : \'\'\n\305\001\n\016fixed64.gt_lte\032\262\001has(" +
      "rules.lte) && rules.lte >= rules.gt && (" +
      "this > rules.lte || this <= rules.gt)? \'" +
      "value must be greater than %s and less t" +
      "han or equal to %s\'.format([rules.gt, ru" +
      "les.lte]) : \'\'\n\315\001\n\030fixed64.gt_lte_exclus" +
      "ive\032\260\001has(rules.lte) && rules.lte < rule" +
      "s.gt && (rules.lte < this && this <= rul" +
      "es.gt)? \'value must be greater than %s o" +
      "r less than or equal to %s\'.format([rule" +
      "s.gt, rules.lte]) : \'\'H\001R\002gt\022\362\007\n\003gte\030\005 \001" +
      "(\006B\335\007\302H\331\007\n\212\001\n\013fixed64.gte\032{!has(rules.lt" +
      ") && !has(rules.lte) && this < rules.gte" +
      "? \'value must be greater than or equal t" +
      "o %s\'.format([rules.gte]) : \'\'\n\304\001\n\016fixed" +
      "64.gte_lt\032\261\001has(rules.lt) && rules.lt >=" +
      " rules.gte && (this >= rules.lt || this " +
      "< rules.gte)? \'value must be greater tha" +
      "n or equal to %s and less than %s\'.forma" +
      "t([rules.gte, rules.lt]) : \'\'\n\314\001\n\030fixed6" +
      "4.gte_lt_exclusive\032\257\001has(rules.lt) && ru" +
      "les.lt < rules.gte && (rules.lt <= this " +
      "&& this < rules.gte)? \'value must be gre" +
      "ater than or equal to %s or less than %s" +
      "\'.format([rules.gte, rules.lt]) : \'\'\n\324\001\n" +
      "\017fixed64.gte_lte\032\300\001has(rules.lte) && rul" +
      "es.lte >= rules.gte && (this > rules.lte" +
      " || this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s and less than " +
      "or equal to %s\'.format([rules.gte, rules" +
      ".lte]) : \'\'\n\334\001\n\031fixed64.gte_lte_exclusiv" +
      "e\032\276\001has(rules.lte) && rules.lte < rules." +
      "gte && (rules.lte < this && this < rules" +
      ".gte)? \'value must be greater than or eq" +
      "ual to %s or less than or equal to %s\'.f" +
      "ormat([rules.gte, rules.lte]) : \'\'H\001R\003gt" +
      "e\022\205\001\n\002in\030\006 \003(\006Bu\302Hr\np\n\nfixed64.in\032b!(thi" +
      "s in getField(rules, \'in\')) ? \'value mus" +
      "t be in list %s\'.format([getField(rules," +
      " \'in\')]) : \'\'R\002in\022\177\n\006not_in\030\007 \003(\006Bh\302He\nc" +
      "\n\016fixed64.not_in\032Qthis in rules.not_in ?" +
      " \'value must not be in list %s\'.format([" +
      "rules.not_in]) : \'\'R\005notIn\0226\n\007example\030\010 " +
      "\003(\006B\034\302H\031\n\027\n\017fixed64.example\032\004trueR\007examp" +
      "le*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_th" +
      "an\"\356\025\n\rSFixed32Rules\022\215\001\n\005const\030\001 \001(\017Bw\302H" +
      "t\nr\n\016sfixed32.const\032`this != getField(ru" +
      "les, \'const\') ? \'value must equal %s\'.fo" +
      "rmat([getField(rules, \'const\')]) : \'\'R\005c" +
      "onst\022\221\001\n\002lt\030\002 \001(\017B\177\302H|\nz\n\013sfixed32.lt\032k!" +
      "has(rules.gte) && !has(rules.gt) && this" +
      " >= rules.lt? \'value must be less than %" +
      "s\'.format([rules.lt]) : \'\'H\000R\002lt\022\244\001\n\003lte" +
      "\030\003 \001(\017B\217\001\302H\213\001\n\210\001\n\014sfixed32.lte\032x!has(rul" +
      "es.gte) && !has(rules.gt) && this > rule" +
      "s.lte? \'value must be less than or equal" +
      " to %s\'.format([rules.lte]) : \'\'H\000R\003lte\022" +
      "\252\007\n\002gt\030\004 \001(\017B\227\007\302H\223\007\n}\n\013sfixed32.gt\032n!has" +
      "(rules.lt) && !has(rules.lte) && this <=" +
      " rules.gt? \'value must be greater than %" +
      "s\'.format([rules.gt]) : \'\'\n\266\001\n\016sfixed32." +
      "gt_lt\032\243\001has(rules.lt) && rules.lt >= rul" +
      "es.gt && (this >= rules.lt || this <= ru" +
      "les.gt)? \'value must be greater than %s " +
      "and less than %s\'.format([rules.gt, rule" +
      "s.lt]) : \'\'\n\276\001\n\030sfixed32.gt_lt_exclusive" +
      "\032\241\001has(rules.lt) && rules.lt < rules.gt " +
      "&& (rules.lt <= this && this <= rules.gt" +
      ")? \'value must be greater than %s or les" +
      "s than %s\'.format([rules.gt, rules.lt]) " +
      ": \'\'\n\306\001\n\017sfixed32.gt_lte\032\262\001has(rules.lte" +
      ") && rules.lte >= rules.gt && (this > ru" +
      "les.lte || this <= rules.gt)? \'value mus" +
      "t be greater than %s and less than or eq" +
      "ual to %s\'.format([rules.gt, rules.lte])" +
      " : \'\'\n\316\001\n\031sfixed32.gt_lte_exclusive\032\260\001ha" +
      "s(rules.lte) && rules.lte < rules.gt && " +
      "(rules.lte < this && this <= rules.gt)? " +
      "\'value must be greater than %s or less t" +
      "han or equal to %s\'.format([rules.gt, ru" +
      "les.lte]) : \'\'H\001R\002gt\022\367\007\n\003gte\030\005 \001(\017B\342\007\302H\336" +
      "\007\n\213\001\n\014sfixed32.gte\032{!has(rules.lt) && !h" +
      "as(rules.lte) && this < rules.gte? \'valu" +
      "e must be greater than or equal to %s\'.f" +
      "ormat([rules.gte]) : \'\'\n\305\001\n\017sfixed32.gte" +
      "_lt\032\261\001has(rules.lt) && rules.lt >= rules" +
      ".gte && (this >= rules.lt || this < rule" +
      "s.gte)? \'value must be greater than or e" +
      "qual to %s and less than %s\'.format([rul" +
      "es.gte, rules.lt]) : \'\'\n\315\001\n\031sfixed32.gte" +
      "_lt_exclusive\032\257\001has(rules.lt) && rules.l",
      "t < rules.gte && (rules.lt <= this && th" +
      "is < rules.gte)? \'value must be greater " +
      "than or equal to %s or less than %s\'.for" +
      "mat([rules.gte, rules.lt]) : \'\'\n\325\001\n\020sfix" +
      "ed32.gte_lte\032\300\001has(rules.lte) && rules.l" +
      "te >= rules.gte && (this > rules.lte || " +
      "this < rules.gte)? \'value must be greate" +
      "r than or equal to %s and less than or e" +
      "qual to %s\'.format([rules.gte, rules.lte" +
      "]) : \'\'\n\335\001\n\032sfixed32.gte_lte_exclusive\032\276" +
      "\001has(rules.lte) && rules.lte < rules.gte" +
      " && (rules.lte < this && this < rules.gt" +
      "e)? \'value must be greater than or equal" +
      " to %s or less than or equal to %s\'.form" +
      "at([rules.gte, rules.lte]) : \'\'H\001R\003gte\022\206" +
      "\001\n\002in\030\006 \003(\017Bv\302Hs\nq\n\013sfixed32.in\032b!(this " +
      "in getField(rules, \'in\')) ? \'value must " +
      "be in list %s\'.format([getField(rules, \'" +
      "in\')]) : \'\'R\002in\022\200\001\n\006not_in\030\007 \003(\017Bi\302Hf\nd\n" +
      "\017sfixed32.not_in\032Qthis in rules.not_in ?" +
      " \'value must not be in list %s\'.format([" +
      "rules.not_in]) : \'\'R\005notIn\0227\n\007example\030\010 " +
      "\003(\017B\035\302H\032\n\030\n\020sfixed32.example\032\004trueR\007exam" +
      "ple*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_t" +
      "han\"\356\025\n\rSFixed64Rules\022\215\001\n\005const\030\001 \001(\020Bw\302" +
      "Ht\nr\n\016sfixed64.const\032`this != getField(r" +
      "ules, \'const\') ? \'value must equal %s\'.f" +
      "ormat([getField(rules, \'const\')]) : \'\'R\005" +
      "const\022\221\001\n\002lt\030\002 \001(\020B\177\302H|\nz\n\013sfixed64.lt\032k" +
      "!has(rules.gte) && !has(rules.gt) && thi" +
      "s >= rules.lt? \'value must be less than " +
      "%s\'.format([rules.lt]) : \'\'H\000R\002lt\022\244\001\n\003lt" +
      "e\030\003 \001(\020B\217\001\302H\213\001\n\210\001\n\014sfixed64.lte\032x!has(ru" +
      "les.gte) && !has(rules.gt) && this > rul" +
      "es.lte? \'value must be less than or equa" +
      "l to %s\'.format([rules.lte]) : \'\'H\000R\003lte" +
      "\022\252\007\n\002gt\030\004 \001(\020B\227\007\302H\223\007\n}\n\013sfixed64.gt\032n!ha" +
      "s(rules.lt) && !has(rules.lte) && this <" +
      "= rules.gt? \'value must be greater than " +
      "%s\'.format([rules.gt]) : \'\'\n\266\001\n\016sfixed64" +
      ".gt_lt\032\243\001has(rules.lt) && rules.lt >= ru" +
      "les.gt && (this >= rules.lt || this <= r" +
      "ules.gt)? \'value must be greater than %s" +
      " and less than %s\'.format([rules.gt, rul" +
      "es.lt]) : \'\'\n\276\001\n\030sfixed64.gt_lt_exclusiv" +
      "e\032\241\001has(rules.lt) && rules.lt < rules.gt" +
      " && (rules.lt <= this && this <= rules.g" +
      "t)? \'value must be greater than %s or le" +
      "ss than %s\'.format([rules.gt, rules.lt])" +
      " : \'\'\n\306\001\n\017sfixed64.gt_lte\032\262\001has(rules.lt" +
      "e) && rules.lte >= rules.gt && (this > r" +
      "ules.lte || this <= rules.gt)? \'value mu" +
      "st be greater than %s and less than or e" +
      "qual to %s\'.format([rules.gt, rules.lte]" +
      ") : \'\'\n\316\001\n\031sfixed64.gt_lte_exclusive\032\260\001h" +
      "as(rules.lte) && rules.lte < rules.gt &&" +
      " (rules.lte < this && this <= rules.gt)?" +
      " \'value must be greater than %s or less " +
      "than or equal to %s\'.format([rules.gt, r" +
      "ules.lte]) : \'\'H\001R\002gt\022\367\007\n\003gte\030\005 \001(\020B\342\007\302H" +
      "\336\007\n\213\001\n\014sfixed64.gte\032{!has(rules.lt) && !" +
      "has(rules.lte) && this < rules.gte? \'val" +
      "ue must be greater than or equal to %s\'." +
      "format([rules.gte]) : \'\'\n\305\001\n\017sfixed64.gt" +
      "e_lt\032\261\001has(rules.lt) && rules.lt >= rule" +
      "s.gte && (this >= rules.lt || this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s and less than %s\'.format([ru" +
      "les.gte, rules.lt]) : \'\'\n\315\001\n\031sfixed64.gt" +
      "e_lt_exclusive\032\257\001has(rules.lt) && rules." +
      "lt < rules.gte && (rules.lt <= this && t" +
      "his < rules.gte)? \'value must be greater" +
      " than or equal to %s or less than %s\'.fo" +
      "rmat([rules.gte, rules.lt]) : \'\'\n\325\001\n\020sfi" +
      "xed64.gte_lte\032\300\001has(rules.lte) && rules." +
      "lte >= rules.gte && (this > rules.lte ||" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s and less than or " +
      "equal to %s\'.format([rules.gte, rules.lt" +
      "e]) : \'\'\n\335\001\n\032sfixed64.gte_lte_exclusive\032" +
      "\276\001has(rules.lte) && rules.lte < rules.gt" +
      "e && (rules.lte < this && this < rules.g" +
      "te)? \'value must be greater than or equa" +
      "l to %s or less than or equal to %s\'.for" +
      "mat([rules.gte, rules.lte]) : \'\'H\001R\003gte\022" +
      "\206\001\n\002in\030\006 \003(\020Bv\302Hs\nq\n\013sfixed64.in\032b!(this" +
      " in getField(rules, \'in\')) ? \'value must" +
      " be in list %s\'.format([getField(rules, " +
      "\'in\')]) : \'\'R\002in\022\200\001\n\006not_in\030\007 \003(\020Bi\302Hf\nd" +
      "\n\017sfixed64.not_in\032Qthis in rules.not_in " +
      "? \'value must not be in list %s\'.format(" +
      "[rules.not_in]) : \'\'R\005notIn\0227\n\007example\030\010" +
      " \003(\020B\035\302H\032\n\030\n\020sfixed64.example\032\004trueR\007exa" +
      "mple*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_" +
      "than\"\327\001\n\tBoolRules\022\211\001\n\005const\030\001 \001(\010Bs\302Hp\n" +
      "n\n\nbool.const\032`this != getField(rules, \'" +
      "const\') ? \'value must equal %s\'.format([" +
      "getField(rules, \'const\')]) : \'\'R\005const\0223" +
      "\n\007example\030\002 \003(\010B\031\302H\026\n\024\n\014bool.example\032\004tr" +
      "ueR\007example*\t\010\350\007\020\200\200\200\200\002\"\3219\n\013StringRules\022\215" +
      "\001\n\005const\030\001 \001(\tBw\302Ht\nr\n\014string.const\032bthi" +
      "s != getField(rules, \'const\') ? \'value m" +
      "ust equal `%s`\'.format([getField(rules, " +
      "\'const\')]) : \'\'R\005const\022\203\001\n\003len\030\023 \001(\004Bq\302H" +
      "n\nl\n\nstring.len\032^uint(this.size()) != ru" +
      "les.len ? \'value length must be %s chara" +
      "cters\'.format([rules.len]) : \'\'R\003len\022\241\001\n" +
      "\007min_len\030\002 \001(\004B\207\001\302H\203\001\n\200\001\n\016string.min_len" +
      "\032nuint(this.size()) < rules.min_len ? \'v" +
      "alue length must be at least %s characte" +
      "rs\'.format([rules.min_len]) : \'\'R\006minLen" +
      "\022\237\001\n\007max_len\030\003 \001(\004B\205\001\302H\201\001\n\177\n\016string.max_" +
      "len\032muint(this.size()) > rules.max_len ?" +
      " \'value length must be at most %s charac" +
      "ters\'.format([rules.max_len]) : \'\'R\006maxL" +
      "en\022\245\001\n\tlen_bytes\030\024 \001(\004B\207\001\302H\203\001\n\200\001\n\020string" +
      ".len_bytes\032luint(bytes(this).size()) != " +
      "rules.len_bytes ? \'value length must be " +
      "%s bytes\'.format([rules.len_bytes]) : \'\'" +
      "R\010lenBytes\022\255\001\n\tmin_bytes\030\004 \001(\004B\217\001\302H\213\001\n\210\001" +
      "\n\020string.min_bytes\032tuint(bytes(this).siz" +
      "e()) < rules.min_bytes ? \'value length m" +
      "ust be at least %s bytes\'.format([rules." +
      "min_bytes]) : \'\'R\010minBytes\022\254\001\n\tmax_bytes" +
      "\030\005 \001(\004B\216\001\302H\212\001\n\207\001\n\020string.max_bytes\032suint" +
      "(bytes(this).size()) > rules.max_bytes ?" +
      " \'value length must be at most %s bytes\'" +
      ".format([rules.max_bytes]) : \'\'R\010maxByte" +
      "s\022\226\001\n\007pattern\030\006 \001(\tB|\302Hy\nw\n\016string.patte" +
      "rn\032e!this.matches(rules.pattern) ? \'valu" +
      "e does not match regex pattern `%s`\'.for" +
      "mat([rules.pattern]) : \'\'R\007pattern\022\214\001\n\006p" +
      "refix\030\007 \001(\tBt\302Hq\no\n\rstring.prefix\032^!this" +
      ".startsWith(rules.prefix) ? \'value does " +
      "not have prefix `%s`\'.format([rules.pref" +
      "ix]) : \'\'R\006prefix\022\212\001\n\006suffix\030\010 \001(\tBr\302Ho\n" +
      "m\n\rstring.suffix\032\\!this.endsWith(rules.s" +
      "uffix) ? \'value does not have suffix `%s" +
      "`\'.format([rules.suffix]) : \'\'R\006suffix\022\232" +
      "\001\n\010contains\030\t \001(\tB~\302H{\ny\n\017string.contain" +
      "s\032f!this.contains(rules.contains) ? \'val" +
      "ue does not contain substring `%s`\'.form" +
      "at([rules.contains]) : \'\'R\010contains\022\245\001\n\014" +
      "not_contains\030\027 \001(\tB\201\001\302H~\n|\n\023string.not_c" +
      "ontains\032ethis.contains(rules.not_contain" +
      "s) ? \'value contains substring `%s`\'.for" +
      "mat([rules.not_contains]) : \'\'R\013notConta" +
      "ins\022\204\001\n\002in\030\n \003(\tBt\302Hq\no\n\tstring.in\032b!(th" +
      "is in getField(rules, \'in\')) ? \'value mu" +
      "st be in list %s\'.format([getField(rules" +
      ", \'in\')]) : \'\'R\002in\022~\n\006not_in\030\013 \003(\tBg\302Hd\n" +
      "b\n\rstring.not_in\032Qthis in rules.not_in ?" +
      " \'value must not be in list %s\'.format([" +
      "rules.not_in]) : \'\'R\005notIn\022\346\001\n\005email\030\014 \001" +
      "(\010B\315\001\302H\311\001\na\n\014string.email\022#value must be" +
      " a valid email address\032,!rules.email || " +
      "this == \'\' || this.isEmail()\nd\n\022string.e" +
      "mail_empty\0222value is empty, which is not" +
      " a valid email address\032\032!rules.email || " +
      "this != \'\'H\000R\005email\022\361\001\n\010hostname\030\r \001(\010B\322" +
      "\001\302H\316\001\ne\n\017string.hostname\022\036value must be " +
      "a valid hostname\0322!rules.hostname || thi" +
      "s == \'\' || this.isHostname()\ne\n\025string.h" +
      "ostname_empty\022-value is empty, which is " +
      "not a valid hostname\032\035!rules.hostname ||" +
      " this != \'\'H\000R\010hostname\022\313\001\n\002ip\030\016 \001(\010B\270\001\302" +
      "H\264\001\nU\n\tstring.ip\022 value must be a valid " +
      "IP address\032&!rules.ip || this == \'\' || t" +
      "his.isIp()\n[\n\017string.ip_empty\022/value is " +
      "empty, which is not a valid IP address\032\027" +
      "!rules.ip || this != \'\'H\000R\002ip\022\334\001\n\004ipv4\030\017" +
      " \001(\010B\305\001\302H\301\001\n\\\n\013string.ipv4\022\"value must b" +
      "e a valid IPv4 address\032)!rules.ipv4 || t" +
      "his == \'\' || this.isIp(4)\na\n\021string.ipv4" +
      "_empty\0221value is empty, which is not a v" +
      "alid IPv4 address\032\031!rules.ipv4 || this !" +
      "= \'\'H\000R\004ipv4\022\334\001\n\004ipv6\030\020 \001(\010B\305\001\302H\301\001\n\\\n\013st" +
      "ring.ipv6\022\"value must be a valid IPv6 ad" +
      "dress\032)!rules.ipv6 || this == \'\' || this" +
      ".isIp(6)\na\n\021string.ipv6_empty\0221value is " +
      "empty, which is not a valid IPv6 address" +
      "\032\031!rules.ipv6 || this != \'\'H\000R\004ipv6\022\304\001\n\003" +
      "uri\030\021 \001(\010B\257\001\302H\253\001\nQ\n\nstring.uri\022\031value mu" +
      "st be a valid URI\032(!rules.uri || this ==" +
      " \'\' || this.isUri()\nV\n\020string.uri_empty\022" +
      "(value is empty, which is not a valid UR" +
      "I\032\030!rules.uri || this != \'\'H\000R\003uri\022x\n\007ur" +
      "i_ref\030\022 \001(\010B]\302HZ\nX\n\016string.uri_ref\022#valu" +
      "e must be a valid URI Reference\032!!rules." +
      "uri_ref || this.isUriRef()H\000R\006uriRef\022\231\002\n" +
      "\007address\030\025 \001(\010B\374\001\302H\370\001\n\201\001\n\016string.address" +
      "\022-value must be a valid hostname, or ip " +
      "address\032@!rules.address || this == \'\' ||" +
      " this.isHostname() || this.isIp()\nr\n\024str" +
      "ing.address_empty\022<value is empty, which" +
      " is not a valid hostname, or ip address\032" +
      "\034!rules.address || this != \'\'H\000R\007address" +
      "\022\236\002\n\004uuid\030\026 \001(\010B\207\002\302H\203\002\n\245\001\n\013string.uuid\022\032" +
      "value must be a valid UUID\032z!rules.uuid " +
      "|| this == \'\' || this.matches(\'^[0-9a-fA" +
      "-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-" +
      "9a-fA-F]{4}-[0-9a-fA-F]{12}$\')\nY\n\021string" +
      ".uuid_empty\022)value is empty, which is no" +
      "t a valid UUID\032\031!rules.uuid || this != \'" +
      "\'H\000R\004uuid\022\367\001\n\005tuuid\030! \001(\010B\336\001\302H\332\001\ns\n\014stri" +
      "ng.tuuid\022\"value must be a valid trimmed " +
      "UUID\032?!rules.tuuid || this == \'\' || this" +
      ".matches(\'^[0-9a-fA-F]{32}$\')\nc\n\022string." +
      "tuuid_empty\0221value is empty, which is no" +
      "t a valid trimmed UUID\032\032!rules.tuuid || " +
      "this != \'\'H\000R\005tuuid\022\247\002\n\021ip_with_prefixle" +
      "n\030\032 \001(\010B\370\001\302H\364\001\nx\n\030string.ip_with_prefixl" +
      "en\022\037value must be a valid IP prefix\032;!ru" +
      "les.ip_with_prefixlen || this == \'\' || t" +
      "his.isIpPrefix()\nx\n\036string.ip_with_prefi" +
      "xlen_empty\022.value is empty, which is not" +
      " a valid IP prefix\032&!rules.ip_with_prefi" +
      "xlen || this != \'\'H\000R\017ipWithPrefixlen\022\342\002" +
      "\n\023ipv4_with_prefixlen\030\033 \001(\010B\257\002\302H\253\002\n\223\001\n\032s" +
      "tring.ipv4_with_prefixlen\0225value must be" +
      " a valid IPv4 address with prefix length" +
      "\032>!rules.ipv4_with_prefixlen || this == " +
      "\'\' || this.isIpPrefix(4)\n\222\001\n string.ipv4" +
      "_with_prefixlen_empty\022Dvalue is empty, w" +
      "hich is not a valid IPv4 address with pr" +
      "efix length\032(!rules.ipv4_with_prefixlen " +
      "|| this != \'\'H\000R\021ipv4WithPrefixlen\022\342\002\n\023i" +
      "pv6_with_prefixlen\030\034 \001(\010B\257\002\302H\253\002\n\223\001\n\032stri" +
      "ng.ipv6_with_prefixlen\0225value must be a " +
      "valid IPv6 address with prefix length\032>!" +
      "rules.ipv6_with_prefixlen || this == \'\' " +
      "|| this.isIpPrefix(6)\n\222\001\n string.ipv6_wi" +
      "th_prefixlen_empty\022Dvalue is empty, whic" +
      "h is not a valid IPv6 address with prefi" +
      "x length\032(!rules.ipv6_with_prefixlen || " +
      "this != \'\'H\000R\021ipv6WithPrefixlen\022\374\001\n\tip_p" +
      "refix\030\035 \001(\010B\334\001\302H\330\001\nl\n\020string.ip_prefix\022\037" +
      "value must be a valid IP prefix\0327!rules." +
      "ip_prefix || this == \'\' || this.isIpPref" +
      "ix(true)\nh\n\026string.ip_prefix_empty\022.valu" +
      "e is empty, which is not a valid IP pref" +
      "ix\032\036!rules.ip_prefix || this != \'\'H\000R\010ip" +
      "Prefix\022\217\002\n\013ipv4_prefix\030\036 \001(\010B\353\001\302H\347\001\nu\n\022s" +
      "tring.ipv4_prefix\022!value must be a valid" +
      " IPv4 prefix\032<!rules.ipv4_prefix || this" +
      " == \'\' || this.isIpPrefix(4, true)\nn\n\030st" +
      "ring.ipv4_prefix_empty\0220value is empty, " +
      "which is not a valid IPv4 prefix\032 !rules" +
      ".ipv4_prefix || this != \'\'H\000R\nipv4Prefix" +
      "\022\217\002\n\013ipv6_prefix\030\037 \001(\010B\353\001\302H\347\001\nu\n\022string." +
      "ipv6_prefix\022!value must be a valid IPv6 " +
      "prefix\032<!rules.ipv6_prefix || this == \'\'" +
      " || this.isIpPrefix(6, true)\nn\n\030string.i" +
      "pv6_prefix_empty\0220value is empty, which " +
      "is not a valid IPv6 prefix\032 !rules.ipv6_" +
      "prefix || this != \'\'H\000R\nipv6Prefix\022\302\002\n\rh" +
      "ost_and_port\030  \001(\010B\233\002\302H\227\002\n\231\001\n\024string.hos" +
      "t_and_port\022Avalue must be a valid host (" +
      "hostname or IP address) and port pair\032>!" +
      "rules.host_and_port || this == \'\' || thi" +
      "s.isHostAndPort(true)\ny\n\032string.host_and" +
      "_port_empty\0227value is empty, which is no" +
      "t a valid host and port pair\032\"!rules.hos" +
      "t_and_port || this != \'\'H\000R\013hostAndPort\022" +
      "\270\005\n\020well_known_regex\030\030 \001(\0162\030.buf.validat" +
      "e.KnownRegexB\361\004\302H\355\004\n\360\001\n#string.well_know" +
      "n_regex.header_name\022&value must be a val" +
      "id HTTP header name\032\240\001rules.well_known_r" +
      "egex != 1 || this == \'\' || this.matches(" +
      "!has(rules.strict) || rules.strict ?\'^:?" +
      "[0-9a-zA-Z!#$%&\\\'*+-.^_|~\\x60]+$\' :\'^[^\\" +
      "u0000\\u000A\\u000D]+$\')\n\215\001\n)string.well_k" +
      "nown_regex.header_name_empty\0225value is e" +
      "mpty, which is not a valid HTTP header n" +
      "ame\032)rules.well_known_regex != 1 || this" +
      " != \'\'\n\347\001\n$string.well_known_regex.heade" +
      "r_value\022\'value must be a valid HTTP head" +
      "er value\032\225\001rules.well_known_regex != 2 |" +
      "| this.matches(!has(rules.strict) || rul" +
      "es.strict ?\'^[^\\u0000-\\u0008\\u000A-\\u001" +
      "F\\u007F]*$\' :\'^[^\\u0000\\u000A\\u000D]*$\')" +
      "H\000R\016wellKnownRegex\022\026\n\006strict\030\031 \001(\010R\006stri" +
      "ct\0225\n\007example\030\" \003(\tB\033\302H\030\n\026\n\016string.examp" +
      "le\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\014\n\nwell_kno" +
      "wn\"\316\021\n\nBytesRules\022\207\001\n\005const\030\001 \001(\014Bq\302Hn\nl" +
      "\n\013bytes.const\032]this != getField(rules, \'" +
      "const\') ? \'value must be %x\'.format([get" +
      "Field(rules, \'const\')]) : \'\'R\005const\022}\n\003l" +
      "en\030\r \001(\004Bk\302Hh\nf\n\tbytes.len\032Yuint(this.si" +
      "ze()) != rules.len ? \'value length must " +
      "be %s bytes\'.format([rules.len]) : \'\'R\003l" +
      "en\022\230\001\n\007min_len\030\002 \001(\004B\177\302H|\nz\n\rbytes.min_l" +
      "en\032iuint(this.size()) < rules.min_len ? " +
      "\'value length must be at least %s bytes\'" +
      ".format([rules.min_len]) : \'\'R\006minLen\022\220\001" +
      "\n\007max_len\030\003 \001(\004Bw\302Ht\nr\n\rbytes.max_len\032au" +
      "int(this.size()) > rules.max_len ? \'valu" +
      "e must be at most %s bytes\'.format([rule" +
      "s.max_len]) : \'\'R\006maxLen\022\231\001\n\007pattern\030\004 \001" +
      "(\tB\177\302H|\nz\n\rbytes.pattern\032i!string(this)." +
      "matches(rules.pattern) ? \'value must mat" +
      "ch regex pattern `%s`\'.format([rules.pat" +
      "tern]) : \'\'R\007pattern\022\211\001\n\006prefix\030\005 \001(\014Bq\302" +
      "Hn\nl\n\014bytes.prefix\032\\!this.startsWith(rul" +
      "es.prefix) ? \'value does not have prefix" +
      " %x\'.format([rules.prefix]) : \'\'R\006prefix" +
      "\022\207\001\n\006suffix\030\006 \001(\014Bo\302Hl\nj\n\014bytes.suffix\032Z" +
      "!this.endsWith(rules.suffix) ? \'value do" +
      "es not have suffix %x\'.format([rules.suf" +
      "fix]) : \'\'R\006suffix\022\215\001\n\010contains\030\007 \001(\014Bq\302" +
      "Hn\nl\n\016bytes.contains\032Z!this.contains(rul" +
      "es.contains) ? \'value does not contain %" +
      "x\'.format([rules.contains]) : \'\'R\010contai" +
      "ns\022\253\001\n\002in\030\010 \003(\014B\232\001\302H\226\001\n\223\001\n\010bytes.in\032\206\001ge" +
      "tField(rules, \'in\').size() > 0 && !(this" +
      " in getField(rules, \'in\')) ? \'value must" +
      " be in list %s\'.format([getField(rules, " +
      "\'in\')]) : \'\'R\002in\022}\n\006not_in\030\t \003(\014Bf\302Hc\na\n" +
      "\014bytes.not_in\032Qthis in rules.not_in ? \'v" +
      "alue must not be in list %s\'.format([rul" +
      "es.not_in]) : \'\'R\005notIn\022\357\001\n\002ip\030\n \001(\010B\334\001\302" +
      "H\330\001\nt\n\010bytes.ip\022 value must be a valid I" +
      "P address\032F!rules.ip || this.size() == 0" +
      " || this.size() == 4 || this.size() == 1" +
      "6\n`\n\016bytes.ip_empty\022/value is empty, whi" +
      "ch is not a valid IP address\032\035!rules.ip " +
      "|| this.size() != 0H\000R\002ip\022\352\001\n\004ipv4\030\013 \001(\010" +
      "B\323\001\302H\317\001\ne\n\nbytes.ipv4\022\"value must be a v" +
      "alid IPv4 address\0323!rules.ipv4 || this.s" +
      "ize() == 0 || this.size() == 4\nf\n\020bytes." +
      "ipv4_empty\0221value is empty, which is not" +
      " a valid IPv4 address\032\037!rules.ipv4 || th" +
      "is.size() != 0H\000R\004ipv4\022\353\001\n\004ipv6\030\014 \001(\010B\324\001" +
      "\302H\320\001\nf\n\nbytes.ipv6\022\"value must be a vali" +
      "d IPv6 address\0324!rules.ipv6 || this.size" +
      "() == 0 || this.size() == 16\nf\n\020bytes.ip" +
      "v6_empty\0221value is empty, which is not a" +
      " valid IPv6 address\032\037!rules.ipv6 || this" +
      ".size() != 0H\000R\004ipv6\0224\n\007example\030\016 \003(\014B\032\302" +
      "H\027\n\025\n\rbytes.example\032\004trueR\007example*\t\010\350\007\020" +
      "\200\200\200\200\002B\014\n\nwell_known\"\375\003\n\tEnumRules\022\211\001\n\005co" +
      "nst\030\001 \001(\005Bs\302Hp\nn\n\nenum.const\032`this != ge" +
      "tField(rules, \'const\') ? \'value must equ" +
      "al %s\'.format([getField(rules, \'const\')]" +
      ") : \'\'R\005const\022!\n\014defined_only\030\002 \001(\010R\013def" +
      "inedOnly\022\202\001\n\002in\030\003 \003(\005Br\302Ho\nm\n\007enum.in\032b!" +
      "(this in getField(rules, \'in\')) ? \'value" +
      " must be in list %s\'.format([getField(ru" +
      "les, \'in\')]) : \'\'R\002in\022|\n\006not_in\030\004 \003(\005Be\302" +
      "Hb\n`\n\013enum.not_in\032Qthis in rules.not_in " +
      "? \'value must not be in list %s\'.format(" +
      "[rules.not_in]) : \'\'R\005notIn\0223\n\007example\030\005" +
      " \003(\005B\031\302H\026\n\024\n\014enum.example\032\004trueR\007example" +
      "*\t\010\350\007\020\200\200\200\200\002\"\236\004\n\rRepeatedRules\022\250\001\n\tmin_it" +
      "ems\030\001 \001(\004B\212\001\302H\206\001\n\203\001\n\022repeated.min_items\032" +
      "muint(this.size()) < rules.min_items ? \'" +
      "value must contain at least %d item(s)\'." +
      "format([rules.min_items]) : \'\'R\010minItems" +
      "\022\254\001\n\tmax_items\030\002 \001(\004B\216\001\302H\212\001\n\207\001\n\022repeated" +
      ".max_items\032quint(this.size()) > rules.ma" +
      "x_items ? \'value must contain no more th" +
      "an %s item(s)\'.format([rules.max_items])" +
      " : \'\'R\010maxItems\022x\n\006unique\030\003 \001(\010B`\302H]\n[\n\017" +
      "repeated.unique\022(repeated value must con" +
      "tain unique items\032\036!rules.unique || this" +
      ".unique()R\006unique\022.\n\005items\030\004 \001(\0132\030.buf.v" +
      "alidate.FieldRulesR\005items*\t\010\350\007\020\200\200\200\200\002\"\254\003\n" +
      "\010MapRules\022\231\001\n\tmin_pairs\030\001 \001(\004B|\302Hy\nw\n\rma" +
      "p.min_pairs\032fuint(this.size()) < rules.m" +
      "in_pairs ? \'map must be at least %d entr" +
      "ies\'.format([rules.min_pairs]) : \'\'R\010min" +
      "Pairs\022\230\001\n\tmax_pairs\030\002 \001(\004B{\302Hx\nv\n\rmap.ma" +
      "x_pairs\032euint(this.size()) > rules.max_p" +
      "airs ? \'map must be at most %d entries\'." +
      "format([rules.max_pairs]) : \'\'R\010maxPairs" +
      "\022,\n\004keys\030\004 \001(\0132\030.buf.validate.FieldRules" +
      "R\004keys\0220\n\006values\030\005 \001(\0132\030.buf.validate.Fi" +
      "eldRulesR\006values*\t\010\350\007\020\200\200\200\200\002\"1\n\010AnyRules\022" +
      "\016\n\002in\030\002 \003(\tR\002in\022\025\n\006not_in\030\003 \003(\tR\005notIn\"\306" +
      "\027\n\rDurationRules\022\250\001\n\005const\030\002 \001(\0132\031.googl" +
      "e.protobuf.DurationBw\302Ht\nr\n\016duration.con" +
      "st\032`this != getField(rules, \'const\') ? \'" +
      "value must equal %s\'.format([getField(ru" +
      "les, \'const\')]) : \'\'R\005const\022\254\001\n\002lt\030\003 \001(\013" +
      "2\031.google.protobuf.DurationB\177\302H|\nz\n\013dura" +
      "tion.lt\032k!has(rules.gte) && !has(rules.g" +
      "t) && this >= rules.lt? \'value must be l" +
      "ess than %s\'.format([rules.lt]) : \'\'H\000R\002" +
      "lt\022\277\001\n\003lte\030\004 \001(\0132\031.google.protobuf.Durat" +
      "ionB\217\001\302H\213\001\n\210\001\n\014duration.lte\032x!has(rules." +
      "gte) && !has(rules.gt) && this > rules.l" +
      "te? \'value must be less than or equal to" +
      " %s\'.format([rules.lte]) : \'\'H\000R\003lte\022\305\007\n" +
      "\002gt\030\005 \001(\0132\031.google.protobuf.DurationB\227\007\302" +
      "H\223\007\n}\n\013duration.gt\032n!has(rules.lt) && !h" +
      "as(rules.lte) && this <= rules.gt? \'valu" +
      "e must be greater than %s\'.format([rules" +
      ".gt]) : \'\'\n\266\001\n\016duration.gt_lt\032\243\001has(rule" +
      "s.lt) && rules.lt >= rules.gt && (this >" +
      "= rules.lt || this <= rules.gt)? \'value ",
      "must be greater than %s and less than %s" +
      "\'.format([rules.gt, rules.lt]) : \'\'\n\276\001\n\030" +
      "duration.gt_lt_exclusive\032\241\001has(rules.lt)" +
      " && rules.lt < rules.gt && (rules.lt <= " +
      "this && this <= rules.gt)? \'value must b" +
      "e greater than %s or less than %s\'.forma" +
      "t([rules.gt, rules.lt]) : \'\'\n\306\001\n\017duratio" +
      "n.gt_lte\032\262\001has(rules.lte) && rules.lte >" +
      "= rules.gt && (this > rules.lte || this " +
      "<= rules.gt)? \'value must be greater tha" +
      "n %s and less than or equal to %s\'.forma" +
      "t([rules.gt, rules.lte]) : \'\'\n\316\001\n\031durati" +
      "on.gt_lte_exclusive\032\260\001has(rules.lte) && " +
      "rules.lte < rules.gt && (rules.lte < thi" +
      "s && this <= rules.gt)? \'value must be g" +
      "reater than %s or less than or equal to " +
      "%s\'.format([rules.gt, rules.lte]) : \'\'H\001" +
      "R\002gt\022\222\010\n\003gte\030\006 \001(\0132\031.google.protobuf.Dur" +
      "ationB\342\007\302H\336\007\n\213\001\n\014duration.gte\032{!has(rule" +
      "s.lt) && !has(rules.lte) && this < rules" +
      ".gte? \'value must be greater than or equ" +
      "al to %s\'.format([rules.gte]) : \'\'\n\305\001\n\017d" +
      "uration.gte_lt\032\261\001has(rules.lt) && rules." +
      "lt >= rules.gte && (this >= rules.lt || " +
      "this < rules.gte)? \'value must be greate" +
      "r than or equal to %s and less than %s\'." +
      "format([rules.gte, rules.lt]) : \'\'\n\315\001\n\031d" +
      "uration.gte_lt_exclusive\032\257\001has(rules.lt)" +
      " && rules.lt < rules.gte && (rules.lt <=" +
      " this && this < rules.gte)? \'value must " +
      "be greater than or equal to %s or less t" +
      "han %s\'.format([rules.gte, rules.lt]) : " +
      "\'\'\n\325\001\n\020duration.gte_lte\032\300\001has(rules.lte)" +
      " && rules.lte >= rules.gte && (this > ru" +
      "les.lte || this < rules.gte)? \'value mus" +
      "t be greater than or equal to %s and les" +
      "s than or equal to %s\'.format([rules.gte" +
      ", rules.lte]) : \'\'\n\335\001\n\032duration.gte_lte_" +
      "exclusive\032\276\001has(rules.lte) && rules.lte " +
      "< rules.gte && (rules.lte < this && this" +
      " < rules.gte)? \'value must be greater th" +
      "an or equal to %s or less than or equal " +
      "to %s\'.format([rules.gte, rules.lte]) : " +
      "\'\'H\001R\003gte\022\241\001\n\002in\030\007 \003(\0132\031.google.protobuf" +
      ".DurationBv\302Hs\nq\n\013duration.in\032b!(this in" +
      " getField(rules, \'in\')) ? \'value must be" +
      " in list %s\'.format([getField(rules, \'in" +
      "\')]) : \'\'R\002in\022\233\001\n\006not_in\030\010 \003(\0132\031.google." +
      "protobuf.DurationBi\302Hf\nd\n\017duration.not_i" +
      "n\032Qthis in rules.not_in ? \'value must no" +
      "t be in list %s\'.format([rules.not_in]) " +
      ": \'\'R\005notIn\022R\n\007example\030\t \003(\0132\031.google.pr" +
      "otobuf.DurationB\035\302H\032\n\030\n\020duration.example" +
      "\032\004trueR\007example*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB" +
      "\016\n\014greater_than\"\312\030\n\016TimestampRules\022\252\001\n\005c" +
      "onst\030\002 \001(\0132\032.google.protobuf.TimestampBx" +
      "\302Hu\ns\n\017timestamp.const\032`this != getField" +
      "(rules, \'const\') ? \'value must equal %s\'" +
      ".format([getField(rules, \'const\')]) : \'\'" +
      "R\005const\022\257\001\n\002lt\030\003 \001(\0132\032.google.protobuf.T" +
      "imestampB\200\001\302H}\n{\n\014timestamp.lt\032k!has(rul" +
      "es.gte) && !has(rules.gt) && this >= rul" +
      "es.lt? \'value must be less than %s\'.form" +
      "at([rules.lt]) : \'\'H\000R\002lt\022\301\001\n\003lte\030\004 \001(\0132" +
      "\032.google.protobuf.TimestampB\220\001\302H\214\001\n\211\001\n\rt" +
      "imestamp.lte\032x!has(rules.gte) && !has(ru" +
      "les.gt) && this > rules.lte? \'value must" +
      " be less than or equal to %s\'.format([ru" +
      "les.lte]) : \'\'H\000R\003lte\022s\n\006lt_now\030\007 \001(\010BZ\302" +
      "HW\nU\n\020timestamp.lt_now\032A(rules.lt_now &&" +
      " this > now) ? \'value must be less than " +
      "now\' : \'\'H\000R\005ltNow\022\313\007\n\002gt\030\005 \001(\0132\032.google" +
      ".protobuf.TimestampB\234\007\302H\230\007\n~\n\014timestamp." +
      "gt\032n!has(rules.lt) && !has(rules.lte) &&" +
      " this <= rules.gt? \'value must be greate" +
      "r than %s\'.format([rules.gt]) : \'\'\n\267\001\n\017t" +
      "imestamp.gt_lt\032\243\001has(rules.lt) && rules." +
      "lt >= rules.gt && (this >= rules.lt || t" +
      "his <= rules.gt)? \'value must be greater" +
      " than %s and less than %s\'.format([rules" +
      ".gt, rules.lt]) : \'\'\n\277\001\n\031timestamp.gt_lt" +
      "_exclusive\032\241\001has(rules.lt) && rules.lt <" +
      " rules.gt && (rules.lt <= this && this <" +
      "= rules.gt)? \'value must be greater than" +
      " %s or less than %s\'.format([rules.gt, r" +
      "ules.lt]) : \'\'\n\307\001\n\020timestamp.gt_lte\032\262\001ha" +
      "s(rules.lte) && rules.lte >= rules.gt &&" +
      " (this > rules.lte || this <= rules.gt)?" +
      " \'value must be greater than %s and less" +
      " than or equal to %s\'.format([rules.gt, " +
      "rules.lte]) : \'\'\n\317\001\n\032timestamp.gt_lte_ex" +
      "clusive\032\260\001has(rules.lte) && rules.lte < " +
      "rules.gt && (rules.lte < this && this <=" +
      " rules.gt)? \'value must be greater than " +
      "%s or less than or equal to %s\'.format([" +
      "rules.gt, rules.lte]) : \'\'H\001R\002gt\022\230\010\n\003gte" +
      "\030\006 \001(\0132\032.google.protobuf.TimestampB\347\007\302H\343" +
      "\007\n\214\001\n\rtimestamp.gte\032{!has(rules.lt) && !" +
      "has(rules.lte) && this < rules.gte? \'val" +
      "ue must be greater than or equal to %s\'." +
      "format([rules.gte]) : \'\'\n\306\001\n\020timestamp.g" +
      "te_lt\032\261\001has(rules.lt) && rules.lt >= rul" +
      "es.gte && (this >= rules.lt || this < ru" +
      "les.gte)? \'value must be greater than or" +
      " equal to %s and less than %s\'.format([r" +
      "ules.gte, rules.lt]) : \'\'\n\316\001\n\032timestamp." +
      "gte_lt_exclusive\032\257\001has(rules.lt) && rule" +
      "s.lt < rules.gte && (rules.lt <= this &&" +
      " this < rules.gte)? \'value must be great" +
      "er than or equal to %s or less than %s\'." +
      "format([rules.gte, rules.lt]) : \'\'\n\326\001\n\021t" +
      "imestamp.gte_lte\032\300\001has(rules.lte) && rul" +
      "es.lte >= rules.gte && (this > rules.lte" +
      " || this < rules.gte)? \'value must be gr" +
      "eater than or equal to %s and less than " +
      "or equal to %s\'.format([rules.gte, rules" +
      ".lte]) : \'\'\n\336\001\n\033timestamp.gte_lte_exclus" +
      "ive\032\276\001has(rules.lte) && rules.lte < rule" +
      "s.gte && (rules.lte < this && this < rul" +
      "es.gte)? \'value must be greater than or " +
      "equal to %s or less than or equal to %s\'" +
      ".format([rules.gte, rules.lte]) : \'\'H\001R\003" +
      "gte\022v\n\006gt_now\030\010 \001(\010B]\302HZ\nX\n\020timestamp.gt" +
      "_now\032D(rules.gt_now && this < now) ? \'va" +
      "lue must be greater than now\' : \'\'H\001R\005gt" +
      "Now\022\300\001\n\006within\030\t \001(\0132\031.google.protobuf.D" +
      "urationB\214\001\302H\210\001\n\205\001\n\020timestamp.within\032qthi" +
      "s < now-rules.within || this > now+rules" +
      ".within ? \'value must be within %s of no" +
      "w\'.format([rules.within]) : \'\'R\006within\022T" +
      "\n\007example\030\n \003(\0132\032.google.protobuf.Timest" +
      "ampB\036\302H\033\n\031\n\021timestamp.example\032\004trueR\007exa" +
      "mple*\t\010\350\007\020\200\200\200\200\002B\013\n\tless_thanB\016\n\014greater_" +
      "than\"E\n\nViolations\0227\n\nviolations\030\001 \003(\0132\027" +
      ".buf.validate.ViolationR\nviolations\"\305\001\n\t" +
      "Violation\022-\n\005field\030\005 \001(\0132\027.buf.validate." +
      "FieldPathR\005field\022+\n\004rule\030\006 \001(\0132\027.buf.val" +
      "idate.FieldPathR\004rule\022\027\n\007rule_id\030\002 \001(\tR\006" +
      "ruleId\022\030\n\007message\030\003 \001(\tR\007message\022\027\n\007for_" +
      "key\030\004 \001(\010R\006forKeyJ\004\010\001\020\002R\nfield_path\"G\n\tF" +
      "ieldPath\022:\n\010elements\030\001 \003(\0132\036.buf.validat" +
      "e.FieldPathElementR\010elements\"\314\003\n\020FieldPa" +
      "thElement\022!\n\014field_number\030\001 \001(\005R\013fieldNu" +
      "mber\022\035\n\nfield_name\030\002 \001(\tR\tfieldName\022I\n\nf" +
      "ield_type\030\003 \001(\0162*.google.protobuf.FieldD" +
      "escriptorProto.TypeR\tfieldType\022E\n\010key_ty" +
      "pe\030\004 \001(\0162*.google.protobuf.FieldDescript" +
      "orProto.TypeR\007keyType\022I\n\nvalue_type\030\005 \001(" +
      "\0162*.google.protobuf.FieldDescriptorProto" +
      ".TypeR\tvalueType\022\026\n\005index\030\006 \001(\004H\000R\005index" +
      "\022\033\n\010bool_key\030\007 \001(\010H\000R\007boolKey\022\031\n\007int_key" +
      "\030\010 \001(\003H\000R\006intKey\022\033\n\010uint_key\030\t \001(\004H\000R\007ui" +
      "ntKey\022\037\n\nstring_key\030\n \001(\tH\000R\tstringKeyB\013" +
      "\n\tsubscript*\241\001\n\006Ignore\022\026\n\022IGNORE_UNSPECI" +
      "FIED\020\000\022\030\n\024IGNORE_IF_ZERO_VALUE\020\001\022\021\n\rIGNO" +
      "RE_ALWAYS\020\003\"\004\010\002\020\002*\014IGNORE_EMPTY*\016IGNORE_" +
      "DEFAULT*\027IGNORE_IF_DEFAULT_VALUE*\025IGNORE" +
      "_IF_UNPOPULATED*n\n\nKnownRegex\022\033\n\027KNOWN_R" +
      "EGEX_UNSPECIFIED\020\000\022 \n\034KNOWN_REGEX_HTTP_H" +
      "EADER_NAME\020\001\022!\n\035KNOWN_REGEX_HTTP_HEADER_" +
      "VALUE\020\002:V\n\007message\022\037.google.protobuf.Mes" +
      "sageOptions\030\207\t \001(\0132\032.buf.validate.Messag" +
      "eRulesR\007message:N\n\005oneof\022\035.google.protob" +
      "uf.OneofOptions\030\207\t \001(\0132\030.buf.validate.On" +
      "eofRulesR\005oneof:N\n\005field\022\035.google.protob" +
      "uf.FieldOptions\030\207\t \001(\0132\030.buf.validate.Fi" +
      "eldRulesR\005field:]\n\npredefined\022\035.google.p" +
      "rotobuf.FieldOptions\030\210\t \001(\0132\035.buf.valida" +
      "te.PredefinedRulesR\npredefinedBn\n\022build." +
      "buf.validateB\rValidateProtoP\001ZGbuf.build" +
      "/gen/go/bufbuild/protovalidate/protocolb" +
      "uffers/go/buf/validate"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DescriptorProtos.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_buf_validate_Rule_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_buf_validate_Rule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Rule_descriptor,
        new java.lang.String[] { "Id", "Message", "Expression", });
    internal_static_buf_validate_MessageRules_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_buf_validate_MessageRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_MessageRules_descriptor,
        new java.lang.String[] { "Cel", "Oneof", });
    internal_static_buf_validate_MessageOneofRule_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_buf_validate_MessageOneofRule_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_MessageOneofRule_descriptor,
        new java.lang.String[] { "Fields", "Required", });
    internal_static_buf_validate_OneofRules_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_buf_validate_OneofRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_OneofRules_descriptor,
        new java.lang.String[] { "Required", });
    internal_static_buf_validate_FieldRules_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_buf_validate_FieldRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_FieldRules_descriptor,
        new java.lang.String[] { "Cel", "Required", "Ignore", "Float", "Double", "Int32", "Int64", "Uint32", "Uint64", "Sint32", "Sint64", "Fixed32", "Fixed64", "Sfixed32", "Sfixed64", "Bool", "String", "Bytes", "Enum", "Repeated", "Map", "Any", "Duration", "Timestamp", "Type", });
    internal_static_buf_validate_PredefinedRules_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_buf_validate_PredefinedRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_PredefinedRules_descriptor,
        new java.lang.String[] { "Cel", });
    internal_static_buf_validate_FloatRules_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_buf_validate_FloatRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_FloatRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_DoubleRules_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_buf_validate_DoubleRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_DoubleRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Finite", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Int32Rules_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_buf_validate_Int32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Int32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Int64Rules_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_buf_validate_Int64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Int64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_UInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_buf_validate_UInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_UInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_UInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_buf_validate_UInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_UInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SInt32Rules_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_buf_validate_SInt32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_SInt32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SInt64Rules_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_buf_validate_SInt64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_SInt64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Fixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_buf_validate_Fixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Fixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Fixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_buf_validate_Fixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Fixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SFixed32Rules_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_buf_validate_SFixed32Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_SFixed32Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_SFixed64Rules_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_buf_validate_SFixed64Rules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_SFixed64Rules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_BoolRules_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_buf_validate_BoolRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_BoolRules_descriptor,
        new java.lang.String[] { "Const", "Example", });
    internal_static_buf_validate_StringRules_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_buf_validate_StringRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_StringRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "LenBytes", "MinBytes", "MaxBytes", "Pattern", "Prefix", "Suffix", "Contains", "NotContains", "In", "NotIn", "Email", "Hostname", "Ip", "Ipv4", "Ipv6", "Uri", "UriRef", "Address", "Uuid", "Tuuid", "IpWithPrefixlen", "Ipv4WithPrefixlen", "Ipv6WithPrefixlen", "IpPrefix", "Ipv4Prefix", "Ipv6Prefix", "HostAndPort", "WellKnownRegex", "Strict", "Example", "WellKnown", });
    internal_static_buf_validate_BytesRules_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_buf_validate_BytesRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_BytesRules_descriptor,
        new java.lang.String[] { "Const", "Len", "MinLen", "MaxLen", "Pattern", "Prefix", "Suffix", "Contains", "In", "NotIn", "Ip", "Ipv4", "Ipv6", "Example", "WellKnown", });
    internal_static_buf_validate_EnumRules_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_buf_validate_EnumRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_EnumRules_descriptor,
        new java.lang.String[] { "Const", "DefinedOnly", "In", "NotIn", "Example", });
    internal_static_buf_validate_RepeatedRules_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_buf_validate_RepeatedRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_RepeatedRules_descriptor,
        new java.lang.String[] { "MinItems", "MaxItems", "Unique", "Items", });
    internal_static_buf_validate_MapRules_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_buf_validate_MapRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_MapRules_descriptor,
        new java.lang.String[] { "MinPairs", "MaxPairs", "Keys", "Values", });
    internal_static_buf_validate_AnyRules_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_buf_validate_AnyRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_AnyRules_descriptor,
        new java.lang.String[] { "In", "NotIn", });
    internal_static_buf_validate_DurationRules_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_buf_validate_DurationRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_DurationRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "Gt", "Gte", "In", "NotIn", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_TimestampRules_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_buf_validate_TimestampRules_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_TimestampRules_descriptor,
        new java.lang.String[] { "Const", "Lt", "Lte", "LtNow", "Gt", "Gte", "GtNow", "Within", "Example", "LessThan", "GreaterThan", });
    internal_static_buf_validate_Violations_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_buf_validate_Violations_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Violations_descriptor,
        new java.lang.String[] { "Violations", });
    internal_static_buf_validate_Violation_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_buf_validate_Violation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_Violation_descriptor,
        new java.lang.String[] { "Field", "Rule", "RuleId", "Message", "ForKey", });
    internal_static_buf_validate_FieldPath_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_buf_validate_FieldPath_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_FieldPath_descriptor,
        new java.lang.String[] { "Elements", });
    internal_static_buf_validate_FieldPathElement_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_buf_validate_FieldPathElement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_buf_validate_FieldPathElement_descriptor,
        new java.lang.String[] { "FieldNumber", "FieldName", "FieldType", "KeyType", "ValueType", "Index", "BoolKey", "IntKey", "UintKey", "StringKey", "Subscript", });
    message.internalInit(descriptor.getExtensions().get(0));
    oneof.internalInit(descriptor.getExtensions().get(1));
    field.internalInit(descriptor.getExtensions().get(2));
    predefined.internalInit(descriptor.getExtensions().get(3));
    descriptor.resolveAllFeaturesImmutable();
    com.google.protobuf.DescriptorProtos.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(build.buf.validate.ValidateProto.predefined);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
