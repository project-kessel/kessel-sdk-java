// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kessel/inventory/v1beta2/write_visibility.proto
// Protobuf Java Version: 4.32.0

package org.project_kessel.api.inventory.v1beta2;

/**
 * Protobuf enum {@code kessel.inventory.v1beta2.WriteVisibility}
 */
@com.google.protobuf.Generated
public enum WriteVisibility
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * WRITE_VISIBILITY_UNSPECIFIED: The default behavior of the write operation. Defaults to MINIMIZE_LATENCY
   * strategy.
   * </pre>
   *
   * <code>WRITE_VISIBILITY_UNSPECIFIED = 0;</code>
   */
  WRITE_VISIBILITY_UNSPECIFIED(0),
  /**
   * <pre>
   * MINIMIZE_LATENCY: The write operation will be performed with the goal of minimizing latency
   * by not waiting for data consistency acknowledgment.
   * </pre>
   *
   * <code>MINIMIZE_LATENCY = 1;</code>
   */
  MINIMIZE_LATENCY(1),
  /**
   * <pre>
   * IMMEDIATE: The write operation will be performed with the goal of ensuring immediate consistency
   * by waiting for data consistency acknowledgment. Additional
   * latency may be incurred
   * </pre>
   *
   * <code>IMMEDIATE = 2;</code>
   */
  IMMEDIATE(2),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 32,
      /* patch= */ 0,
      /* suffix= */ "",
      WriteVisibility.class.getName());
  }
  /**
   * <pre>
   * WRITE_VISIBILITY_UNSPECIFIED: The default behavior of the write operation. Defaults to MINIMIZE_LATENCY
   * strategy.
   * </pre>
   *
   * <code>WRITE_VISIBILITY_UNSPECIFIED = 0;</code>
   */
  public static final int WRITE_VISIBILITY_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * MINIMIZE_LATENCY: The write operation will be performed with the goal of minimizing latency
   * by not waiting for data consistency acknowledgment.
   * </pre>
   *
   * <code>MINIMIZE_LATENCY = 1;</code>
   */
  public static final int MINIMIZE_LATENCY_VALUE = 1;
  /**
   * <pre>
   * IMMEDIATE: The write operation will be performed with the goal of ensuring immediate consistency
   * by waiting for data consistency acknowledgment. Additional
   * latency may be incurred
   * </pre>
   *
   * <code>IMMEDIATE = 2;</code>
   */
  public static final int IMMEDIATE_VALUE = 2;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static WriteVisibility valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static WriteVisibility forNumber(int value) {
    switch (value) {
      case 0: return WRITE_VISIBILITY_UNSPECIFIED;
      case 1: return MINIMIZE_LATENCY;
      case 2: return IMMEDIATE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<WriteVisibility>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      WriteVisibility> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<WriteVisibility>() {
          public WriteVisibility findValueByNumber(int number) {
            return WriteVisibility.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.project_kessel.api.inventory.v1beta2.WriteVisibilityOuterClass.getDescriptor().getEnumTypes().get(0);
  }

  private static final WriteVisibility[] VALUES = values();

  public static WriteVisibility valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private WriteVisibility(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:kessel.inventory.v1beta2.WriteVisibility)
}

